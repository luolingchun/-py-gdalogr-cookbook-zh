{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python GDAL/OGR \u4e2d\u6587\u624b\u518c \u00b6 \u672c\u9879\u76ee\u662f\u7ffb\u8bd1\u9879\u76ee\uff0c\u82f1\u6587\u9879\u76ee\u5730\u5740\uff1a https://github.com/pcjericks/py-gdalogr-cookbook","title":"\u4e3b\u9875"},{"location":"#python-gdalogr","text":"\u672c\u9879\u76ee\u662f\u7ffb\u8bd1\u9879\u76ee\uff0c\u82f1\u6587\u9879\u76ee\u5730\u5740\uff1a https://github.com/pcjericks/py-gdalogr-cookbook","title":"python GDAL/OGR \u4e2d\u6587\u624b\u518c"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/","text":"GDAL/OGR\u4e00\u822c\u4f7f\u7528 \u00b6 \u68c0\u6d4b\u5b89\u88c5 \u00b6 from osgeo import gdal \u67e5\u770b\u7248\u672c \u00b6 gdal . VersionInfo ( 'VERSION_NUM' ) # '2040100' \u5f00\u542fpython\u5f02\u5e38 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u9519\u8bef\u65f6\uff0cGDAL/OGR Python\u7ed1\u5b9a\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u8fd4\u56de\u9519\u8bef\u503c\uff08\u4f8b\u5982None\uff09\uff0c\u5e76\u5c06\u9519\u8bef\u6d88\u606f\u5199\u5165sys.stdout\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528UseExceptions()\u51fd\u6570\u6765\u5f00\u542f\u5f02\u5e38\uff1a from osgeo import gdal # \u5f00\u542f\u5f02\u5e38 gdal . UseExceptions () # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u6570\u636e\u96c6 ds = gdal . Open ( 'test.tif' ) # \u5f00\u542f\u5f02\u5e38\u524d ERROR 4 : test . tif : No such file or directory # \u5f00\u542f\u5f02\u5e38\u540e RuntimeError Traceback ( most recent call last ) < ipython - input - 5 - 6 ef000fdc647 > in < module > ----> 1 gdal . Open ( \"test.tif\" ) c : \\ program files \\ python37 \\ lib \\ site - packages \\ osgeo \\ gdal . py in Open ( * args ) 3114 def Open ( * args ): 3115 \"\"\"Open(char const * utf8_path, GDALAccess eAccess) -> Dataset\"\"\" -> 3116 return _gdal . Open ( * args ) 3117 3118 def OpenEx ( * args , ** kwargs ): RuntimeError : test . tif : No such file or directory \u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7981\u7528GDAL/OGR\u5f02\u5e38\uff1a gdal . DontUseExceptions () \u5b89\u88c5GDAL OGR\u9519\u8bef\u5904\u7406 \u00b6 \u5b89\u88c5GDAL\u9519\u8bef\u5904\u7406\u7a0b\u5e8f\u529f\u80fd\uff0c\u4ee5\u6355\u83b7GDAL\u9519\u8bef\u3001\u7c7b\u548c\u6d88\u606f\u3002\u4ec5\u9002\u7528\u4e8eGDAL 1.10\u4ee5\u4e0a\u7684\u7248\u672c\u3002 from osgeo import ogr , osr , gdal # GDAL\u9519\u8bef\u5904\u7406\u65b9\u6cd5 def gdal_error_handler ( err_class , err_num , err_msg ): errtype = { gdal . CE_None : 'None' , gdal . CE_Debug : 'Debug' , gdal . CE_Warning : 'Warning' , gdal . CE_Failure : 'Failure' , gdal . CE_Fatal : 'Fatal' } err_msg = err_msg . replace ( ' \\n ' , ' ' ) err_class = errtype . get ( err_class , 'None' ) print ( 'Error Number: %s ' % ( err_num )) print ( 'Error Type: %s ' % ( err_class )) print ( 'Error Message: %s ' % ( err_msg )) if __name__ == '__main__' : # \u5b89\u88c5\u9519\u8bef\u5904\u7406 gdal . PushErrorHandler ( gdal_error_handler ) # \u629b\u51fa\u4e00\u4e2a\u5047\u7684\u9519\u8bef gdal . Error ( 1 , 2 , 'test error' ) # \u5378\u8f7d\u9519\u8bef\u5904\u7406 gdal . PopErrorHandler ()","title":"\u4e00\u822c\u4f7f\u7528"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#gdalogr","text":"","title":"GDAL/OGR\u4e00\u822c\u4f7f\u7528"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#_1","text":"from osgeo import gdal","title":"\u68c0\u6d4b\u5b89\u88c5"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#_2","text":"gdal . VersionInfo ( 'VERSION_NUM' ) # '2040100'","title":"\u67e5\u770b\u7248\u672c"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#python","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u9519\u8bef\u65f6\uff0cGDAL/OGR Python\u7ed1\u5b9a\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u8fd4\u56de\u9519\u8bef\u503c\uff08\u4f8b\u5982None\uff09\uff0c\u5e76\u5c06\u9519\u8bef\u6d88\u606f\u5199\u5165sys.stdout\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528UseExceptions()\u51fd\u6570\u6765\u5f00\u542f\u5f02\u5e38\uff1a from osgeo import gdal # \u5f00\u542f\u5f02\u5e38 gdal . UseExceptions () # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u6570\u636e\u96c6 ds = gdal . Open ( 'test.tif' ) # \u5f00\u542f\u5f02\u5e38\u524d ERROR 4 : test . tif : No such file or directory # \u5f00\u542f\u5f02\u5e38\u540e RuntimeError Traceback ( most recent call last ) < ipython - input - 5 - 6 ef000fdc647 > in < module > ----> 1 gdal . Open ( \"test.tif\" ) c : \\ program files \\ python37 \\ lib \\ site - packages \\ osgeo \\ gdal . py in Open ( * args ) 3114 def Open ( * args ): 3115 \"\"\"Open(char const * utf8_path, GDALAccess eAccess) -> Dataset\"\"\" -> 3116 return _gdal . Open ( * args ) 3117 3118 def OpenEx ( * args , ** kwargs ): RuntimeError : test . tif : No such file or directory \u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u7684\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7981\u7528GDAL/OGR\u5f02\u5e38\uff1a gdal . DontUseExceptions ()","title":"\u5f00\u542fpython\u5f02\u5e38"},{"location":"%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/#gdal-ogr","text":"\u5b89\u88c5GDAL\u9519\u8bef\u5904\u7406\u7a0b\u5e8f\u529f\u80fd\uff0c\u4ee5\u6355\u83b7GDAL\u9519\u8bef\u3001\u7c7b\u548c\u6d88\u606f\u3002\u4ec5\u9002\u7528\u4e8eGDAL 1.10\u4ee5\u4e0a\u7684\u7248\u672c\u3002 from osgeo import ogr , osr , gdal # GDAL\u9519\u8bef\u5904\u7406\u65b9\u6cd5 def gdal_error_handler ( err_class , err_num , err_msg ): errtype = { gdal . CE_None : 'None' , gdal . CE_Debug : 'Debug' , gdal . CE_Warning : 'Warning' , gdal . CE_Failure : 'Failure' , gdal . CE_Fatal : 'Fatal' } err_msg = err_msg . replace ( ' \\n ' , ' ' ) err_class = errtype . get ( err_class , 'None' ) print ( 'Error Number: %s ' % ( err_num )) print ( 'Error Type: %s ' % ( err_class )) print ( 'Error Message: %s ' % ( err_msg )) if __name__ == '__main__' : # \u5b89\u88c5\u9519\u8bef\u5904\u7406 gdal . PushErrorHandler ( gdal_error_handler ) # \u629b\u51fa\u4e00\u4e2a\u5047\u7684\u9519\u8bef gdal . Error ( 1 , 2 , 'test error' ) # \u5378\u8f7d\u9519\u8bef\u5904\u7406 gdal . PopErrorHandler ()","title":"\u5b89\u88c5GDAL OGR\u9519\u8bef\u5904\u7406"},{"location":"%E5%87%A0%E4%BD%95/","text":"\u51e0\u4f55 \u00b6 \u521b\u5efa\u70b9 \u00b6 from osgeo import ogr point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( 1198054.34 , 648493.09 ) print ( point . ExportToWkt ()) \u521b\u5efa\u7ebf \u00b6 from osgeo import ogr line = ogr . Geometry ( ogr . wkbLineString ) line . AddPoint ( 1116651.439379124 , 637392.6969887456 ) line . AddPoint ( 1188804.0108498496 , 652655.7409537067 ) line . AddPoint ( 1226730.3625203592 , 634155.0816022386 ) line . AddPoint ( 1281307.30760719 , 636467.6640211721 ) print ( line . ExportToWkt ()) \u521b\u5efa\u591a\u8fb9\u5f62 \u00b6 from osgeo import ogr # \u521b\u5efa\u73af ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) # \u521b\u5efa\u591a\u8fb9\u5f62 poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) print ( poly . ExportToWkt ()) \u521b\u5efa\u5e26\u6d1e\u7684\u591a\u8fb9\u5f62 \u00b6 from osgeo import ogr # \u521b\u5efa\u5185\u73af outRing = ogr . Geometry ( ogr . wkbLinearRing ) outRing . AddPoint ( 1154115.274565847 , 686419.4442701361 ) outRing . AddPoint ( 1154115.274565847 , 653118.2574374934 ) outRing . AddPoint ( 1165678.1866605144 , 653118.2574374934 ) outRing . AddPoint ( 1165678.1866605144 , 686419.4442701361 ) outRing . AddPoint ( 1154115.274565847 , 686419.4442701361 ) # \u521b\u5efa\u5916\u73af innerRing = ogr . Geometry ( ogr . wkbLinearRing ) innerRing . AddPoint ( 1149490.1097279799 , 691044.6091080031 ) innerRing . AddPoint ( 1149490.1097279799 , 648030.5761158396 ) innerRing . AddPoint ( 1191579.1097525698 , 648030.5761158396 ) innerRing . AddPoint ( 1191579.1097525698 , 691044.6091080031 ) innerRing . AddPoint ( 1149490.1097279799 , 691044.6091080031 ) # \u521b\u5efa\u591a\u8fb9\u5f62 poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( outRing ) poly . AddGeometry ( innerRing ) print ( poly . ExportToWkt ()) \u521b\u5efa\u591a\u90e8\u4ef6\u70b9 \u00b6 from osgeo import ogr multipoint = ogr . Geometry ( ogr . wkbMultiPoint ) point1 = ogr . Geometry ( ogr . wkbPoint ) point1 . AddPoint ( 1251243.7361610543 , 598078.7958668759 ) multipoint . AddGeometry ( point1 ) point2 = ogr . Geometry ( ogr . wkbPoint ) point2 . AddPoint ( 1240605.8570339603 , 601778.9277371694 ) multipoint . AddGeometry ( point2 ) point3 = ogr . Geometry ( ogr . wkbPoint ) point3 . AddPoint ( 1250318.7031934808 , 606404.0925750365 ) multipoint . AddGeometry ( point3 ) print ( multipoint . ExportToWkt ()) \u521b\u5efa\u591a\u90e8\u4ef6\u7ebf \u00b6 from osgeo import ogr multiline = ogr . Geometry ( ogr . wkbMultiLineString ) line1 = ogr . Geometry ( ogr . wkbLineString ) line1 . AddPoint ( 1214242.4174581182 , 617041.9717021306 ) line1 . AddPoint ( 1234593.142744733 , 629529.9167643716 ) multiline . AddGeometry ( line1 ) line1 = ogr . Geometry ( ogr . wkbLineString ) line1 . AddPoint ( 1184641.3624957693 , 626754.8178616514 ) line1 . AddPoint ( 1219792.6152635587 , 606866.6090588232 ) multiline . AddGeometry ( line1 ) print ( multiline . ExportToWkt ()) \u521b\u5efa\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62 \u00b6 from osgeo import ogr multipolygon = ogr . Geometry ( ogr . wkbMultiPolygon ) # \u521b\u5efa\u73af #1 ring1 = ogr . Geometry ( ogr . wkbLinearRing ) ring1 . AddPoint ( 1204067.0548148106 , 634617.5980860253 ) ring1 . AddPoint ( 1204067.0548148106 , 620742.1035724243 ) ring1 . AddPoint ( 1215167.4504256917 , 620742.1035724243 ) ring1 . AddPoint ( 1215167.4504256917 , 634617.5980860253 ) ring1 . AddPoint ( 1204067.0548148106 , 634617.5980860253 ) # \u521b\u5efa\u591a\u8fb9\u5f62 #1 poly1 = ogr . Geometry ( ogr . wkbPolygon ) poly1 . AddGeometry ( ring1 ) multipolygon . AddGeometry ( poly1 ) # \u521b\u5efa\u73af #2 ring2 = ogr . Geometry ( ogr . wkbLinearRing ) ring2 . AddPoint ( 1179553.6811741155 , 647105.5431482664 ) ring2 . AddPoint ( 1179553.6811741155 , 626292.3013778647 ) ring2 . AddPoint ( 1194354.20865529 , 626292.3013778647 ) ring2 . AddPoint ( 1194354.20865529 , 647105.5431482664 ) ring2 . AddPoint ( 1179553.6811741155 , 647105.5431482664 ) # \u521b\u5efa\u591a\u8fb9\u5f62 #2 poly2 = ogr . Geometry ( ogr . wkbPolygon ) poly2 . AddGeometry ( ring2 ) multipolygon . AddGeometry ( poly2 ) print ( multipolygon . ExportToWkt ()) \u521b\u5efa\u51e0\u4f55\u96c6\u5408 \u00b6 from osgeo import ogr # \u521b\u5efa\u51e0\u4f55\u96c6\u5408 geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) # \u6dfb\u52a0\u70b9 point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( - 122.23 , 47.09 ) geomcol . AddGeometry ( point ) # \u6dfb\u52a0\u7ebf line = ogr . Geometry ( ogr . wkbLineString ) line . AddPoint ( - 122.60 , 47.14 ) line . AddPoint ( - 122.48 , 47.23 ) geomcol . AddGeometry ( line ) print ( geomcol . ExportToWkt ()) \u4eceWKT\u521b\u5efa\u51e0\u4f55 \u00b6 from osgeo import ogr wkt = \"POINT (1120351.5712494177 741921.4223245403)\" point = ogr . CreateGeometryFromWkt ( wkt ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ())) \u4eceGeoJSON\u521b\u5efa\u51e0\u4f55 \u00b6 from osgeo import ogr geojson = \"\"\"{\"type\":\"Point\",\"coordinates\":[108420.33,753808.59]}\"\"\" point = ogr . CreateGeometryFromJson ( geojson ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ())) \u4eceGML\u521b\u5efa\u51e0\u4f55 \u00b6 from osgeo import ogr gml = \"\"\"<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>108420.33,753808.59</gml:coordinates></gml:Point>\"\"\" point = ogr . CreateGeometryFromGML ( gml ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ())) \u4eceWKB\u521b\u5efa\u51e0\u4f55 \u00b6 from osgeo import ogr from base64 import b64decode wkb = b64decode ( \"AIAAAAFBMkfmVwo9cUEjylouFHrhAAAAAAAAAAA=\" ) point = ogr . CreateGeometryFromWkb ( wkb ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ())) \u8ba1\u7b97\u70b9\u7684\u4e2a\u6570 \u00b6 from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Geometry has %i points\" % ( geom . GetPointCount ())) \u8ba1\u7b97\u51e0\u4f55\u4e2a\u6570 \u00b6 from osgeo import ogr wkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Geometry has %i geometries\" % ( geom . GetGeometryCount ())) \u8fed\u4ee3\u51e0\u4f55 \u00b6 from osgeo import ogr wkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) for i in range ( 0 , geom . GetGeometryCount ()): g = geom . GetGeometryRef ( i ) print ( \" %i ). %s \" % ( i , g . ExportToWkt ())) \u8fed\u4ee3\u70b9 \u00b6 from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) for i in range ( 0 , geom . GetPointCount ()): # GetPoint \u8fd4\u56de\u4e00\u4e2a\u5143\u4fc4\u65e5\u4e0d\u662f\u4e00\u4e2aGeometry pt = geom . GetPoint ( i ) print ( \" %i ). POINT ( %d %d )\" % ( i , pt [ 0 ], pt [ 1 ])) \u51e0\u4f55\u7f13\u51b2\u533a \u00b6 from osgeo import ogr wkt = \"POINT (1198054.34 648493.09)\" pt = ogr . CreateGeometryFromWkt ( wkt ) bufferDistance = 500 poly = pt . Buffer ( bufferDistance ) print ( \" %s buffered by %d is %s \" % ( pt . ExportToWkt (), bufferDistance , poly . ExportToWkt ())) \u8ba1\u7b97\u5305\u56f4\u76d2 \u00b6 from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) # GetEnvelope \u996dhi\u4e00\u4e2a\u5143\u7ec4 (minX, maxX, minY, maxY) env = geom . GetEnvelope () print ( \"minX: %d , minY: %d , maxX: %d , maxY: %d \" % ( env [ 0 ], env [ 2 ], env [ 1 ], env [ 3 ])) \u8ba1\u7b97\u9762\u79ef \u00b6 from osgeo import ogr wkt = \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\" poly = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Area = %d \" % poly . GetArea ()) \u8ba1\u7b97\u957f\u5ea6 \u00b6 from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Length = %d \" % geom . Length ()) \u83b7\u5f97\u51e0\u4f55\u7c7b\u578b \u00b6 from osgeo import ogr wkts = [ \"POINT (1198054.34 648493.09)\" , \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" , \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\" ] for wkt in wkts : geom = ogr . CreateGeometryFromWkt ( wkt ) print ( geom . GetGeometryName ()) \u8ba1\u7b97\u51e0\u4f55\u76f8\u4ea4 \u00b6 from osgeo import ogr wkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\" wkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\" poly1 = ogr . CreateGeometryFromWkt ( wkt1 ) poly2 = ogr . CreateGeometryFromWkt ( wkt2 ) intersection = poly1 . Intersection ( poly2 ) print ( intersection . ExportToWkt ()) \u8ba1\u7b97\u51e0\u4f55\u5e76\u96c6 \u00b6 from osgeo import ogr wkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\" wkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\" poly1 = ogr . CreateGeometryFromWkt ( wkt1 ) poly2 = ogr . CreateGeometryFromWkt ( wkt2 ) union = poly1 . Union ( poly2 ) print ( poly1 ) print ( poly2 ) print ( union . ExportToWkt ()) \u8f93\u51fa\u51e0\u4f55\u5230GeoJSON \u00b6 \u6709\u4e24\u4e2a\u9009\u9879\u53ef\u4ece\u51e0\u4f55\u56fe\u5f62\u521b\u5efaGeoJSON\u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684GeoJSON\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u51e0\u4f55\u56fe\u5f62\u5bfc\u51fa\u5230Json\u5e76\u8fdb\u884c\u6253\u5370\uff0c\u8fd9\u4e24\u4e2a\u9009\u9879\u5c06\u5728\u4e0b\u9762\u8bf4\u660e\u3002 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # \u521b\u5efa\u8f93\u51fa\u9a71\u52a8 outDriver = ogr . GetDriverByName ( 'GeoJSON' ) # \u521b\u5efa\u8f93\u51faGeoJSON outDataSource = outDriver . CreateDataSource ( 'test.geojson' ) outLayer = outDataSource . CreateLayer ( 'test.geojson' , geom_type = ogr . wkbPolygon ) # \u521b\u5efa\u8981\u7d20\u5b9a\u4e49 featureDefn = outLayer . GetLayerDefn () # \u521b\u5efa\u65b0\u8981\u7d20 outFeature = ogr . Feature ( featureDefn ) # \u8bbe\u7f6e\u65b0\u51e0\u4f55 outFeature . SetGeometry ( poly ) # \u6dfb\u52a0\u8981\u7d20\u5230\u56fe\u5c42 outLayer . CreateFeature ( outFeature ) # \u91ca\u653e\u8981\u7d20 outFeature = None # \u4fdd\u5b58\u5173\u95ed\u6570\u636e\u6e90 outDataSource = None from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) geojson = poly . ExportToJson () print ( geojson ) \u8f93\u51fa\u51e0\u4f55\u5230WKT \u00b6 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) # \u8f93\u51fa\u51e0\u4f55\u5230WKT wkt = geom_poly . ExportToWkt () print ( wkt ) \u8f93\u51fa\u51e0\u4f55\u5230KML \u00b6 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) kml = geom_poly . ExportToKML () print ( kml ) \u8f93\u51fa\u51e0\u4f55\u5230WKB \u00b6 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) # \u8f93\u51fa\u51e0\u4f55\u5230WKB wkb = geom_poly . ExportToWkb () print ( wkb ) \u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62 \u00b6 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 poly_wkt = \"POLYGON ((1179091.164690328761935 712782.883845978067257,1161053.021822647424415 667456.268434881232679,1214704.933941904921085 641092.828859039116651,1228580.428455505985767 682719.312399842427112,1218405.065812198445201 721108.180554138729349,1179091.164690328761935 712782.883845978067257))\" geom_poly = ogr . CreateGeometryFromWkt ( poly_wkt ) # \u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62 if geom_poly . GetGeometryType () == ogr . wkbPolygon : geom_poly = ogr . ForceToMultiPolygon ( geom_poly ) # \u5982\u679c\u8fed\u4ee3\u8981\u7d20\u53ea\u662f\u4e3a\u4e86\u66f4\u65b0\u51e0\u4f55(geometry)\uff0c\u53ef\u4ee5\u4f7f\u7528feature.SetGeometryDirectly(geom_poly) # \u8f93\u51fa\u51e0\u4f55\u5230WKT wkt = geom_poly . ExportToWkt () print ( wkt ) \u56db\u7b49\u5206\u591a\u8fb9\u5f62\u5e76\u521b\u5efa\u8d28\u5fc3 \u00b6 from osgeo import ogr # \u521b\u5efa\u591a\u8fb9\u5f62 poly_Wkt = \"POLYGON((-107.42631019589980212 40.11971708125970082,-107.42455436683293613 40.12061219666851741,-107.42020981542387403 40.12004414402532859,-107.41789122063043749 40.12149008687303819,-107.41419947746419439 40.11811617239460048,-107.41915181585792993 40.11761695654455906,-107.41998470913324581 40.11894245264452508,-107.42203317637793702 40.1184088144647788,-107.42430674991324224 40.1174448122981957,-107.42430674991324224 40.1174448122981957,-107.42631019589980212 40.11971708125970082))\" geom_poly = ogr . CreateGeometryFromWkt ( poly_Wkt ) # Create 4 square polygons geom_poly_envelope = geom_poly . GetEnvelope () minX = geom_poly_envelope [ 0 ] minY = geom_poly_envelope [ 2 ] maxX = geom_poly_envelope [ 1 ] maxY = geom_poly_envelope [ 3 ] ''' coord0----coord1----coord2 | | | coord3----coord4----coord5 | | | coord6----coord7----coord8 ''' coord0 = minX , maxY coord1 = minX + ( maxX - minX ) / 2 , maxY coord2 = maxX , maxY coord3 = minX , minY + ( maxY - minY ) / 2 coord4 = minX + ( maxX - minX ) / 2 , minY + ( maxY - minY ) / 2 coord5 = maxX , minY + ( maxY - minY ) / 2 coord6 = minX , minY coord7 = minX + ( maxX - minX ) / 2 , minY coord8 = maxX , minY ringTopLeft = ogr . Geometry ( ogr . wkbLinearRing ) ringTopLeft . AddPoint_2D ( * coord0 ) ringTopLeft . AddPoint_2D ( * coord1 ) ringTopLeft . AddPoint_2D ( * coord4 ) ringTopLeft . AddPoint_2D ( * coord3 ) ringTopLeft . AddPoint_2D ( * coord0 ) polyTopLeft = ogr . Geometry ( ogr . wkbPolygon ) polyTopLeft . AddGeometry ( ringTopLeft ) ringTopRight = ogr . Geometry ( ogr . wkbLinearRing ) ringTopRight . AddPoint_2D ( * coord1 ) ringTopRight . AddPoint_2D ( * coord2 ) ringTopRight . AddPoint_2D ( * coord5 ) ringTopRight . AddPoint_2D ( * coord4 ) ringTopRight . AddPoint_2D ( * coord1 ) polyTopRight = ogr . Geometry ( ogr . wkbPolygon ) polyTopRight . AddGeometry ( ringTopRight ) ringBottomLeft = ogr . Geometry ( ogr . wkbLinearRing ) ringBottomLeft . AddPoint_2D ( * coord3 ) ringBottomLeft . AddPoint_2D ( * coord4 ) ringBottomLeft . AddPoint_2D ( * coord7 ) ringBottomLeft . AddPoint_2D ( * coord6 ) ringBottomLeft . AddPoint_2D ( * coord3 ) polyBottomLeft = ogr . Geometry ( ogr . wkbPolygon ) polyBottomLeft . AddGeometry ( ringBottomLeft ) ringBottomRight = ogr . Geometry ( ogr . wkbLinearRing ) ringBottomRight . AddPoint_2D ( * coord4 ) ringBottomRight . AddPoint_2D ( * coord5 ) ringBottomRight . AddPoint_2D ( * coord8 ) ringBottomRight . AddPoint_2D ( * coord7 ) ringBottomRight . AddPoint_2D ( * coord4 ) polyBottomRight = ogr . Geometry ( ogr . wkbPolygon ) polyBottomRight . AddGeometry ( ringBottomRight ) # \u5bf9\u56db\u4e2a\u65b9\u683c\u591a\u8fb9\u5f62\u6c42\u4ea4 quaterPolyTopLeft = polyTopLeft . Intersection ( geom_poly ) quaterPolyTopRight = polyTopRight . Intersection ( geom_poly ) quaterPolyBottomLeft = polyBottomLeft . Intersection ( geom_poly ) quaterPolyBottomRight = polyBottomRight . Intersection ( geom_poly ) # \u521b\u5efa\u8d28\u5fc3 centroidTopLeft = quaterPolyTopLeft . Centroid () centroidTopRight = quaterPolyTopRight . Centroid () centroidBottomLeft = quaterPolyBottomLeft . Centroid () centroidBottomRight = quaterPolyBottomRight . Centroid ()","title":"\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#_1","text":"","title":"\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#_2","text":"from osgeo import ogr point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( 1198054.34 , 648493.09 ) print ( point . ExportToWkt ())","title":"\u521b\u5efa\u70b9"},{"location":"%E5%87%A0%E4%BD%95/#_3","text":"from osgeo import ogr line = ogr . Geometry ( ogr . wkbLineString ) line . AddPoint ( 1116651.439379124 , 637392.6969887456 ) line . AddPoint ( 1188804.0108498496 , 652655.7409537067 ) line . AddPoint ( 1226730.3625203592 , 634155.0816022386 ) line . AddPoint ( 1281307.30760719 , 636467.6640211721 ) print ( line . ExportToWkt ())","title":"\u521b\u5efa\u7ebf"},{"location":"%E5%87%A0%E4%BD%95/#_4","text":"from osgeo import ogr # \u521b\u5efa\u73af ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) # \u521b\u5efa\u591a\u8fb9\u5f62 poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) print ( poly . ExportToWkt ())","title":"\u521b\u5efa\u591a\u8fb9\u5f62"},{"location":"%E5%87%A0%E4%BD%95/#_5","text":"from osgeo import ogr # \u521b\u5efa\u5185\u73af outRing = ogr . Geometry ( ogr . wkbLinearRing ) outRing . AddPoint ( 1154115.274565847 , 686419.4442701361 ) outRing . AddPoint ( 1154115.274565847 , 653118.2574374934 ) outRing . AddPoint ( 1165678.1866605144 , 653118.2574374934 ) outRing . AddPoint ( 1165678.1866605144 , 686419.4442701361 ) outRing . AddPoint ( 1154115.274565847 , 686419.4442701361 ) # \u521b\u5efa\u5916\u73af innerRing = ogr . Geometry ( ogr . wkbLinearRing ) innerRing . AddPoint ( 1149490.1097279799 , 691044.6091080031 ) innerRing . AddPoint ( 1149490.1097279799 , 648030.5761158396 ) innerRing . AddPoint ( 1191579.1097525698 , 648030.5761158396 ) innerRing . AddPoint ( 1191579.1097525698 , 691044.6091080031 ) innerRing . AddPoint ( 1149490.1097279799 , 691044.6091080031 ) # \u521b\u5efa\u591a\u8fb9\u5f62 poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( outRing ) poly . AddGeometry ( innerRing ) print ( poly . ExportToWkt ())","title":"\u521b\u5efa\u5e26\u6d1e\u7684\u591a\u8fb9\u5f62"},{"location":"%E5%87%A0%E4%BD%95/#_6","text":"from osgeo import ogr multipoint = ogr . Geometry ( ogr . wkbMultiPoint ) point1 = ogr . Geometry ( ogr . wkbPoint ) point1 . AddPoint ( 1251243.7361610543 , 598078.7958668759 ) multipoint . AddGeometry ( point1 ) point2 = ogr . Geometry ( ogr . wkbPoint ) point2 . AddPoint ( 1240605.8570339603 , 601778.9277371694 ) multipoint . AddGeometry ( point2 ) point3 = ogr . Geometry ( ogr . wkbPoint ) point3 . AddPoint ( 1250318.7031934808 , 606404.0925750365 ) multipoint . AddGeometry ( point3 ) print ( multipoint . ExportToWkt ())","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u70b9"},{"location":"%E5%87%A0%E4%BD%95/#_7","text":"from osgeo import ogr multiline = ogr . Geometry ( ogr . wkbMultiLineString ) line1 = ogr . Geometry ( ogr . wkbLineString ) line1 . AddPoint ( 1214242.4174581182 , 617041.9717021306 ) line1 . AddPoint ( 1234593.142744733 , 629529.9167643716 ) multiline . AddGeometry ( line1 ) line1 = ogr . Geometry ( ogr . wkbLineString ) line1 . AddPoint ( 1184641.3624957693 , 626754.8178616514 ) line1 . AddPoint ( 1219792.6152635587 , 606866.6090588232 ) multiline . AddGeometry ( line1 ) print ( multiline . ExportToWkt ())","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u7ebf"},{"location":"%E5%87%A0%E4%BD%95/#_8","text":"from osgeo import ogr multipolygon = ogr . Geometry ( ogr . wkbMultiPolygon ) # \u521b\u5efa\u73af #1 ring1 = ogr . Geometry ( ogr . wkbLinearRing ) ring1 . AddPoint ( 1204067.0548148106 , 634617.5980860253 ) ring1 . AddPoint ( 1204067.0548148106 , 620742.1035724243 ) ring1 . AddPoint ( 1215167.4504256917 , 620742.1035724243 ) ring1 . AddPoint ( 1215167.4504256917 , 634617.5980860253 ) ring1 . AddPoint ( 1204067.0548148106 , 634617.5980860253 ) # \u521b\u5efa\u591a\u8fb9\u5f62 #1 poly1 = ogr . Geometry ( ogr . wkbPolygon ) poly1 . AddGeometry ( ring1 ) multipolygon . AddGeometry ( poly1 ) # \u521b\u5efa\u73af #2 ring2 = ogr . Geometry ( ogr . wkbLinearRing ) ring2 . AddPoint ( 1179553.6811741155 , 647105.5431482664 ) ring2 . AddPoint ( 1179553.6811741155 , 626292.3013778647 ) ring2 . AddPoint ( 1194354.20865529 , 626292.3013778647 ) ring2 . AddPoint ( 1194354.20865529 , 647105.5431482664 ) ring2 . AddPoint ( 1179553.6811741155 , 647105.5431482664 ) # \u521b\u5efa\u591a\u8fb9\u5f62 #2 poly2 = ogr . Geometry ( ogr . wkbPolygon ) poly2 . AddGeometry ( ring2 ) multipolygon . AddGeometry ( poly2 ) print ( multipolygon . ExportToWkt ())","title":"\u521b\u5efa\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62"},{"location":"%E5%87%A0%E4%BD%95/#_9","text":"from osgeo import ogr # \u521b\u5efa\u51e0\u4f55\u96c6\u5408 geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) # \u6dfb\u52a0\u70b9 point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( - 122.23 , 47.09 ) geomcol . AddGeometry ( point ) # \u6dfb\u52a0\u7ebf line = ogr . Geometry ( ogr . wkbLineString ) line . AddPoint ( - 122.60 , 47.14 ) line . AddPoint ( - 122.48 , 47.23 ) geomcol . AddGeometry ( line ) print ( geomcol . ExportToWkt ())","title":"\u521b\u5efa\u51e0\u4f55\u96c6\u5408"},{"location":"%E5%87%A0%E4%BD%95/#wkt","text":"from osgeo import ogr wkt = \"POINT (1120351.5712494177 741921.4223245403)\" point = ogr . CreateGeometryFromWkt ( wkt ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ()))","title":"\u4eceWKT\u521b\u5efa\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#geojson","text":"from osgeo import ogr geojson = \"\"\"{\"type\":\"Point\",\"coordinates\":[108420.33,753808.59]}\"\"\" point = ogr . CreateGeometryFromJson ( geojson ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ()))","title":"\u4eceGeoJSON\u521b\u5efa\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#gml","text":"from osgeo import ogr gml = \"\"\"<gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:coordinates>108420.33,753808.59</gml:coordinates></gml:Point>\"\"\" point = ogr . CreateGeometryFromGML ( gml ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ()))","title":"\u4eceGML\u521b\u5efa\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#wkb","text":"from osgeo import ogr from base64 import b64decode wkb = b64decode ( \"AIAAAAFBMkfmVwo9cUEjylouFHrhAAAAAAAAAAA=\" ) point = ogr . CreateGeometryFromWkb ( wkb ) print ( \" %d , %d \" % ( point . GetX (), point . GetY ()))","title":"\u4eceWKB\u521b\u5efa\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#_10","text":"from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Geometry has %i points\" % ( geom . GetPointCount ()))","title":"\u8ba1\u7b97\u70b9\u7684\u4e2a\u6570"},{"location":"%E5%87%A0%E4%BD%95/#_11","text":"from osgeo import ogr wkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Geometry has %i geometries\" % ( geom . GetGeometryCount ()))","title":"\u8ba1\u7b97\u51e0\u4f55\u4e2a\u6570"},{"location":"%E5%87%A0%E4%BD%95/#_12","text":"from osgeo import ogr wkt = \"MULTIPOINT (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) for i in range ( 0 , geom . GetGeometryCount ()): g = geom . GetGeometryRef ( i ) print ( \" %i ). %s \" % ( i , g . ExportToWkt ()))","title":"\u8fed\u4ee3\u51e0\u4f55"},{"location":"%E5%87%A0%E4%BD%95/#_13","text":"from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) for i in range ( 0 , geom . GetPointCount ()): # GetPoint \u8fd4\u56de\u4e00\u4e2a\u5143\u4fc4\u65e5\u4e0d\u662f\u4e00\u4e2aGeometry pt = geom . GetPoint ( i ) print ( \" %i ). POINT ( %d %d )\" % ( i , pt [ 0 ], pt [ 1 ]))","title":"\u8fed\u4ee3\u70b9"},{"location":"%E5%87%A0%E4%BD%95/#_14","text":"from osgeo import ogr wkt = \"POINT (1198054.34 648493.09)\" pt = ogr . CreateGeometryFromWkt ( wkt ) bufferDistance = 500 poly = pt . Buffer ( bufferDistance ) print ( \" %s buffered by %d is %s \" % ( pt . ExportToWkt (), bufferDistance , poly . ExportToWkt ()))","title":"\u51e0\u4f55\u7f13\u51b2\u533a"},{"location":"%E5%87%A0%E4%BD%95/#_15","text":"from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) # GetEnvelope \u996dhi\u4e00\u4e2a\u5143\u7ec4 (minX, maxX, minY, maxY) env = geom . GetEnvelope () print ( \"minX: %d , minY: %d , maxX: %d , maxY: %d \" % ( env [ 0 ], env [ 2 ], env [ 1 ], env [ 3 ]))","title":"\u8ba1\u7b97\u5305\u56f4\u76d2"},{"location":"%E5%87%A0%E4%BD%95/#_16","text":"from osgeo import ogr wkt = \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\" poly = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Area = %d \" % poly . GetArea ())","title":"\u8ba1\u7b97\u9762\u79ef"},{"location":"%E5%87%A0%E4%BD%95/#_17","text":"from osgeo import ogr wkt = \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" geom = ogr . CreateGeometryFromWkt ( wkt ) print ( \"Length = %d \" % geom . Length ())","title":"\u8ba1\u7b97\u957f\u5ea6"},{"location":"%E5%87%A0%E4%BD%95/#_18","text":"from osgeo import ogr wkts = [ \"POINT (1198054.34 648493.09)\" , \"LINESTRING (1181866.263593049 615654.4222507705, 1205917.1207499576 623979.7189589312, 1227192.8790041457 643405.4112779726, 1224880.2965852122 665143.6860159477)\" , \"POLYGON ((1162440.5712740074 672081.4332727483, 1162440.5712740074 647105.5431482664, 1195279.2416228633 647105.5431482664, 1195279.2416228633 672081.4332727483, 1162440.5712740074 672081.4332727483))\" ] for wkt in wkts : geom = ogr . CreateGeometryFromWkt ( wkt ) print ( geom . GetGeometryName ())","title":"\u83b7\u5f97\u51e0\u4f55\u7c7b\u578b"},{"location":"%E5%87%A0%E4%BD%95/#_19","text":"from osgeo import ogr wkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\" wkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\" poly1 = ogr . CreateGeometryFromWkt ( wkt1 ) poly2 = ogr . CreateGeometryFromWkt ( wkt2 ) intersection = poly1 . Intersection ( poly2 ) print ( intersection . ExportToWkt ())","title":"\u8ba1\u7b97\u51e0\u4f55\u76f8\u4ea4"},{"location":"%E5%87%A0%E4%BD%95/#_20","text":"from osgeo import ogr wkt1 = \"POLYGON ((1208064.271243039 624154.6783778917, 1208064.271243039 601260.9785661874, 1231345.9998651114 601260.9785661874, 1231345.9998651114 624154.6783778917, 1208064.271243039 624154.6783778917))\" wkt2 = \"POLYGON ((1199915.6662253144 633079.3410163528, 1199915.6662253144 614453.958118695, 1219317.1067437078 614453.958118695, 1219317.1067437078 633079.3410163528, 1199915.6662253144 633079.3410163528)))\" poly1 = ogr . CreateGeometryFromWkt ( wkt1 ) poly2 = ogr . CreateGeometryFromWkt ( wkt2 ) union = poly1 . Union ( poly2 ) print ( poly1 ) print ( poly2 ) print ( union . ExportToWkt ())","title":"\u8ba1\u7b97\u51e0\u4f55\u5e76\u96c6"},{"location":"%E5%87%A0%E4%BD%95/#geojson_1","text":"\u6709\u4e24\u4e2a\u9009\u9879\u53ef\u4ece\u51e0\u4f55\u56fe\u5f62\u521b\u5efaGeoJSON\u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684GeoJSON\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u51e0\u4f55\u56fe\u5f62\u5bfc\u51fa\u5230Json\u5e76\u8fdb\u884c\u6253\u5370\uff0c\u8fd9\u4e24\u4e2a\u9009\u9879\u5c06\u5728\u4e0b\u9762\u8bf4\u660e\u3002 from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # \u521b\u5efa\u8f93\u51fa\u9a71\u52a8 outDriver = ogr . GetDriverByName ( 'GeoJSON' ) # \u521b\u5efa\u8f93\u51faGeoJSON outDataSource = outDriver . CreateDataSource ( 'test.geojson' ) outLayer = outDataSource . CreateLayer ( 'test.geojson' , geom_type = ogr . wkbPolygon ) # \u521b\u5efa\u8981\u7d20\u5b9a\u4e49 featureDefn = outLayer . GetLayerDefn () # \u521b\u5efa\u65b0\u8981\u7d20 outFeature = ogr . Feature ( featureDefn ) # \u8bbe\u7f6e\u65b0\u51e0\u4f55 outFeature . SetGeometry ( poly ) # \u6dfb\u52a0\u8981\u7d20\u5230\u56fe\u5c42 outLayer . CreateFeature ( outFeature ) # \u91ca\u653e\u8981\u7d20 outFeature = None # \u4fdd\u5b58\u5173\u95ed\u6570\u636e\u6e90 outDataSource = None from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) geojson = poly . ExportToJson () print ( geojson )","title":"\u8f93\u51fa\u51e0\u4f55\u5230GeoJSON"},{"location":"%E5%87%A0%E4%BD%95/#wkt_1","text":"from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) # \u8f93\u51fa\u51e0\u4f55\u5230WKT wkt = geom_poly . ExportToWkt () print ( wkt )","title":"\u8f93\u51fa\u51e0\u4f55\u5230WKT"},{"location":"%E5%87%A0%E4%BD%95/#kml","text":"from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) kml = geom_poly . ExportToKML () print ( kml )","title":"\u8f93\u51fa\u51e0\u4f55\u5230KML"},{"location":"%E5%87%A0%E4%BD%95/#wkb_1","text":"from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) ring . AddPoint ( 1161053.0218226474 , 667456.2684348812 ) ring . AddPoint ( 1214704.933941905 , 641092.8288590391 ) ring . AddPoint ( 1228580.428455506 , 682719.3123998424 ) ring . AddPoint ( 1218405.0658121984 , 721108.1805541387 ) ring . AddPoint ( 1179091.1646903288 , 712782.8838459781 ) geom_poly = ogr . Geometry ( ogr . wkbPolygon ) geom_poly . AddGeometry ( ring ) # \u8f93\u51fa\u51e0\u4f55\u5230WKB wkb = geom_poly . ExportToWkb () print ( wkb )","title":"\u8f93\u51fa\u51e0\u4f55\u5230WKB"},{"location":"%E5%87%A0%E4%BD%95/#_21","text":"from osgeo import ogr # \u521b\u5efa\u6d4b\u8bd5\u51e0\u4f55 poly_wkt = \"POLYGON ((1179091.164690328761935 712782.883845978067257,1161053.021822647424415 667456.268434881232679,1214704.933941904921085 641092.828859039116651,1228580.428455505985767 682719.312399842427112,1218405.065812198445201 721108.180554138729349,1179091.164690328761935 712782.883845978067257))\" geom_poly = ogr . CreateGeometryFromWkt ( poly_wkt ) # \u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62 if geom_poly . GetGeometryType () == ogr . wkbPolygon : geom_poly = ogr . ForceToMultiPolygon ( geom_poly ) # \u5982\u679c\u8fed\u4ee3\u8981\u7d20\u53ea\u662f\u4e3a\u4e86\u66f4\u65b0\u51e0\u4f55(geometry)\uff0c\u53ef\u4ee5\u4f7f\u7528feature.SetGeometryDirectly(geom_poly) # \u8f93\u51fa\u51e0\u4f55\u5230WKT wkt = geom_poly . ExportToWkt () print ( wkt )","title":"\u5f3a\u5236\u591a\u8fb9\u5f62\u5230\u591a\u90e8\u4ef6\u591a\u8fb9\u5f62"},{"location":"%E5%87%A0%E4%BD%95/#_22","text":"from osgeo import ogr # \u521b\u5efa\u591a\u8fb9\u5f62 poly_Wkt = \"POLYGON((-107.42631019589980212 40.11971708125970082,-107.42455436683293613 40.12061219666851741,-107.42020981542387403 40.12004414402532859,-107.41789122063043749 40.12149008687303819,-107.41419947746419439 40.11811617239460048,-107.41915181585792993 40.11761695654455906,-107.41998470913324581 40.11894245264452508,-107.42203317637793702 40.1184088144647788,-107.42430674991324224 40.1174448122981957,-107.42430674991324224 40.1174448122981957,-107.42631019589980212 40.11971708125970082))\" geom_poly = ogr . CreateGeometryFromWkt ( poly_Wkt ) # Create 4 square polygons geom_poly_envelope = geom_poly . GetEnvelope () minX = geom_poly_envelope [ 0 ] minY = geom_poly_envelope [ 2 ] maxX = geom_poly_envelope [ 1 ] maxY = geom_poly_envelope [ 3 ] ''' coord0----coord1----coord2 | | | coord3----coord4----coord5 | | | coord6----coord7----coord8 ''' coord0 = minX , maxY coord1 = minX + ( maxX - minX ) / 2 , maxY coord2 = maxX , maxY coord3 = minX , minY + ( maxY - minY ) / 2 coord4 = minX + ( maxX - minX ) / 2 , minY + ( maxY - minY ) / 2 coord5 = maxX , minY + ( maxY - minY ) / 2 coord6 = minX , minY coord7 = minX + ( maxX - minX ) / 2 , minY coord8 = maxX , minY ringTopLeft = ogr . Geometry ( ogr . wkbLinearRing ) ringTopLeft . AddPoint_2D ( * coord0 ) ringTopLeft . AddPoint_2D ( * coord1 ) ringTopLeft . AddPoint_2D ( * coord4 ) ringTopLeft . AddPoint_2D ( * coord3 ) ringTopLeft . AddPoint_2D ( * coord0 ) polyTopLeft = ogr . Geometry ( ogr . wkbPolygon ) polyTopLeft . AddGeometry ( ringTopLeft ) ringTopRight = ogr . Geometry ( ogr . wkbLinearRing ) ringTopRight . AddPoint_2D ( * coord1 ) ringTopRight . AddPoint_2D ( * coord2 ) ringTopRight . AddPoint_2D ( * coord5 ) ringTopRight . AddPoint_2D ( * coord4 ) ringTopRight . AddPoint_2D ( * coord1 ) polyTopRight = ogr . Geometry ( ogr . wkbPolygon ) polyTopRight . AddGeometry ( ringTopRight ) ringBottomLeft = ogr . Geometry ( ogr . wkbLinearRing ) ringBottomLeft . AddPoint_2D ( * coord3 ) ringBottomLeft . AddPoint_2D ( * coord4 ) ringBottomLeft . AddPoint_2D ( * coord7 ) ringBottomLeft . AddPoint_2D ( * coord6 ) ringBottomLeft . AddPoint_2D ( * coord3 ) polyBottomLeft = ogr . Geometry ( ogr . wkbPolygon ) polyBottomLeft . AddGeometry ( ringBottomLeft ) ringBottomRight = ogr . Geometry ( ogr . wkbLinearRing ) ringBottomRight . AddPoint_2D ( * coord4 ) ringBottomRight . AddPoint_2D ( * coord5 ) ringBottomRight . AddPoint_2D ( * coord8 ) ringBottomRight . AddPoint_2D ( * coord7 ) ringBottomRight . AddPoint_2D ( * coord4 ) polyBottomRight = ogr . Geometry ( ogr . wkbPolygon ) polyBottomRight . AddGeometry ( ringBottomRight ) # \u5bf9\u56db\u4e2a\u65b9\u683c\u591a\u8fb9\u5f62\u6c42\u4ea4 quaterPolyTopLeft = polyTopLeft . Intersection ( geom_poly ) quaterPolyTopRight = polyTopRight . Intersection ( geom_poly ) quaterPolyBottomLeft = polyBottomLeft . Intersection ( geom_poly ) quaterPolyBottomRight = polyBottomRight . Intersection ( geom_poly ) # \u521b\u5efa\u8d28\u5fc3 centroidTopLeft = quaterPolyTopLeft . Centroid () centroidTopRight = quaterPolyTopRight . Centroid () centroidBottomLeft = quaterPolyBottomLeft . Centroid () centroidBottomRight = quaterPolyBottomRight . Centroid ()","title":"\u56db\u7b49\u5206\u591a\u8fb9\u5f62\u5e76\u521b\u5efa\u8d28\u5fc3"},{"location":"%E6%8A%95%E5%BD%B1/","text":"\u6295\u5f71 \u00b6 \u521b\u5efa\u6295\u5f71 \u00b6 from osgeo import osr spatialRef = osr . SpatialReference () spatialRef . ImportFromEPSG ( 4326 ) #WGS84 \u91cd\u6295\u5f71 \u00b6 from osgeo import ogr from osgeo import osr source = osr . SpatialReference () source . ImportFromEPSG ( 2927 ) target = osr . SpatialReference () target . ImportFromEPSG ( 4326 ) transform = osr . CoordinateTransformation ( source , target ) point = ogr . CreateGeometryFromWkt ( \"POINT (1120351.57 741921.42)\" ) point . Transform ( transform ) print ( point . ExportToWkt ()) \u83b7\u53d6\u6295\u5f71 \u00b6 from osgeo import ogr , osr driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataset = driver . Open ( r './data/test.shp' ) # \u56fe\u5c42 layer = dataset . GetLayer () spatialRef = layer . GetSpatialRef () # \u51e0\u4f55 feature = layer . GetNextFeature () geom = feature . GetGeometryRef () spatialRef = geom . GetSpatialReference () \u91cd\u6295\u5f71\u56fe\u5c42 \u00b6 from osgeo import ogr , osr import os driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) # \u8f93\u5165\u7a7a\u95f4\u53c2\u8003 inSpatialRef = osr . SpatialReference () inSpatialRef . ImportFromEPSG ( 2927 ) # \u8f93\u51fa\u7a7a\u95f4\u53c2\u8003 outSpatialRef = osr . SpatialReference () outSpatialRef . ImportFromEPSG ( 4326 ) # \u521b\u5efa\u5750\u6807\u8f6c\u6362 coordTrans = osr . CoordinateTransformation ( inSpatialRef , outSpatialRef ) # \u8f93\u5165\u56fe\u5c42 inDataSet = driver . Open ( r './data/test.shp' ) inLayer = inDataSet . GetLayer () # \u521b\u5efa\u8f93\u51fa\u56fe\u5c42 outputShapefile = r './data/test_4326.shp' if os . path . exists ( outputShapefile ): driver . DeleteDataSource ( outputShapefile ) outDataSet = driver . CreateDataSource ( outputShapefile ) outLayer = outDataSet . CreateLayer ( \"test_4326\" , geom_type = ogr . wkbMultiPolygon , srs = outSpatialRef # \u8f93\u51faprj\u6587\u4ef6 ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) outLayer . CreateField ( fieldDefn ) outLayerDefn = outLayer . GetLayerDefn () # \u904d\u5386\u8981\u7d20 inFeature = inLayer . GetNextFeature () while inFeature : # \u83b7\u53d6\u51e0\u4f55 geom = inFeature . GetGeometryRef () # \u91cd\u6295\u5f71\u51e0\u4f55 geom . Transform ( coordTrans ) # \u521b\u5efa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u8bbe\u7f6e\u51e0\u4f55\u3001\u5c5e\u6027 outFeature . SetGeometry ( geom ) for i in range ( 0 , outLayerDefn . GetFieldCount ()): outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u6dfb\u52a0\u8981\u7d20 outLayer . CreateFeature ( outFeature ) # \u53d6\u6d88\u5f15\u7528 outFeature = None inFeature = inLayer . GetNextFeature () # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSet = None outDataSet = None \u8f93\u51fa\u6295\u5f71 \u00b6 from osgeo import ogr , osr driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataset = driver . Open ( r './data/test_4326.shp' ) layer = dataset . GetLayer () spatialRef = layer . GetSpatialRef () spatialRef . ExportToWkt () spatialRef . ExportToPrettyWkt () spatialRef . ExportToPCI () spatialRef . ExportToUSGS () spatialRef . ExportToXML () \u521b\u5efaESRI\u6295\u5f71\u6587\u4ef6 \u00b6 from osgeo import ogr , osr spatialRef = osr . SpatialReference () spatialRef . ImportFromEPSG ( 26912 ) spatialRef . MorphToESRI () file = open ( 'yourshpfile.prj' , 'w' ) file . write ( spatialRef . ExportToWkt ()) file . close ()","title":"\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#_1","text":"","title":"\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#_2","text":"from osgeo import osr spatialRef = osr . SpatialReference () spatialRef . ImportFromEPSG ( 4326 ) #WGS84","title":"\u521b\u5efa\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#_3","text":"from osgeo import ogr from osgeo import osr source = osr . SpatialReference () source . ImportFromEPSG ( 2927 ) target = osr . SpatialReference () target . ImportFromEPSG ( 4326 ) transform = osr . CoordinateTransformation ( source , target ) point = ogr . CreateGeometryFromWkt ( \"POINT (1120351.57 741921.42)\" ) point . Transform ( transform ) print ( point . ExportToWkt ())","title":"\u91cd\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#_4","text":"from osgeo import ogr , osr driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataset = driver . Open ( r './data/test.shp' ) # \u56fe\u5c42 layer = dataset . GetLayer () spatialRef = layer . GetSpatialRef () # \u51e0\u4f55 feature = layer . GetNextFeature () geom = feature . GetGeometryRef () spatialRef = geom . GetSpatialReference ()","title":"\u83b7\u53d6\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#_5","text":"from osgeo import ogr , osr import os driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) # \u8f93\u5165\u7a7a\u95f4\u53c2\u8003 inSpatialRef = osr . SpatialReference () inSpatialRef . ImportFromEPSG ( 2927 ) # \u8f93\u51fa\u7a7a\u95f4\u53c2\u8003 outSpatialRef = osr . SpatialReference () outSpatialRef . ImportFromEPSG ( 4326 ) # \u521b\u5efa\u5750\u6807\u8f6c\u6362 coordTrans = osr . CoordinateTransformation ( inSpatialRef , outSpatialRef ) # \u8f93\u5165\u56fe\u5c42 inDataSet = driver . Open ( r './data/test.shp' ) inLayer = inDataSet . GetLayer () # \u521b\u5efa\u8f93\u51fa\u56fe\u5c42 outputShapefile = r './data/test_4326.shp' if os . path . exists ( outputShapefile ): driver . DeleteDataSource ( outputShapefile ) outDataSet = driver . CreateDataSource ( outputShapefile ) outLayer = outDataSet . CreateLayer ( \"test_4326\" , geom_type = ogr . wkbMultiPolygon , srs = outSpatialRef # \u8f93\u51faprj\u6587\u4ef6 ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) outLayer . CreateField ( fieldDefn ) outLayerDefn = outLayer . GetLayerDefn () # \u904d\u5386\u8981\u7d20 inFeature = inLayer . GetNextFeature () while inFeature : # \u83b7\u53d6\u51e0\u4f55 geom = inFeature . GetGeometryRef () # \u91cd\u6295\u5f71\u51e0\u4f55 geom . Transform ( coordTrans ) # \u521b\u5efa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u8bbe\u7f6e\u51e0\u4f55\u3001\u5c5e\u6027 outFeature . SetGeometry ( geom ) for i in range ( 0 , outLayerDefn . GetFieldCount ()): outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u6dfb\u52a0\u8981\u7d20 outLayer . CreateFeature ( outFeature ) # \u53d6\u6d88\u5f15\u7528 outFeature = None inFeature = inLayer . GetNextFeature () # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSet = None outDataSet = None","title":"\u91cd\u6295\u5f71\u56fe\u5c42"},{"location":"%E6%8A%95%E5%BD%B1/#_6","text":"from osgeo import ogr , osr driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataset = driver . Open ( r './data/test_4326.shp' ) layer = dataset . GetLayer () spatialRef = layer . GetSpatialRef () spatialRef . ExportToWkt () spatialRef . ExportToPrettyWkt () spatialRef . ExportToPCI () spatialRef . ExportToUSGS () spatialRef . ExportToXML ()","title":"\u8f93\u51fa\u6295\u5f71"},{"location":"%E6%8A%95%E5%BD%B1/#esri","text":"from osgeo import ogr , osr spatialRef = osr . SpatialReference () spatialRef . ImportFromEPSG ( 26912 ) spatialRef . MorphToESRI () file = open ( 'yourshpfile.prj' , 'w' ) file . write ( spatialRef . ExportToWkt ()) file . close ()","title":"\u521b\u5efaESRI\u6295\u5f71\u6587\u4ef6"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/","text":"\u6805\u683c\u56fe\u5c42 \u00b6 \u5173\u95ed\u6805\u683c\u6570\u636e \u00b6 from osgeo import gdal # \u6253\u5f00\u6570\u636e ds = gdal . Open ( 'test.tif' ) # \u5173\u95ed\u6570\u636e\uff08\u975e\u5fc5\u987b\uff09 ds = None \u83b7\u53d6\u5143\u6570\u636e \u00b6 from osgeo import gdal gtif = gdal.Open( \"merge.tif\" ) print (gtif.GetMetadata()) \u6ce2\u6bb5\u878d\u5408 \u00b6 from osgeo import gdal # \u6253\u5f00\u6570\u636e ds1 = gdal . Open ( \"LM51130321998341HAJ00_B1.TIF\" ) ds2 = gdal . Open ( \"LM51130321998341HAJ00_B2.TIF\" ) ds3 = gdal . Open ( \"LM51130321998341HAJ00_B3.TIF\" ) ds4 = gdal . Open ( \"LM51130321998341HAJ00_B4.TIF\" ) # \u83b7\u53d6\u6ce2\u6bb5 b1 = ds1 . GetRasterBand ( 1 ) b2 = ds1 . GetRasterBand ( 1 ) b3 = ds1 . GetRasterBand ( 1 ) b4 = ds1 . GetRasterBand ( 1 ) # \u521b\u5efa\u6570\u636e driver = gdal . GetDriverByName ( \"GTiff\" ) out_ds = driver . Create ( 'merge.tif' , ds1 . RasterXSize , ds1 . RasterYSize , 4 , gdal . GDT_Byte ) # \u8bbe\u7f6e\u5750\u6807\u548c\u6295\u5f71 out_ds . SetGeoTransform ( ds1 . GetGeoTransform ()) out_ds . SetProjection ( ds1 . GetProjection ()) ob1 = out_ds . GetRasterBand ( 1 ) ob2 = out_ds . GetRasterBand ( 2 ) ob3 = out_ds . GetRasterBand ( 3 ) ob4 = out_ds . GetRasterBand ( 4 ) # \u5199\u5165\u6570\u636e ob1 . WriteArray ( b1 . ReadAsArray ()) ob2 . WriteArray ( b2 . ReadAsArray ()) ob3 . WriteArray ( b3 . ReadAsArray ()) ob4 . WriteArray ( b4 . ReadAsArray ()) out_ds = None \u83b7\u53d6\u6ce2\u6bb5 \u00b6 from osgeo import gdal import sys # \u5141\u8bb8python\u5f02\u5e38 gdal . UseExceptions () try : src_ds = gdal . Open ( \"merge.tif\" ) except RuntimeError as e : print ( e ) sys . exit ( 1 ) try : srcband = src_ds . GetRasterBand ( 1 ) except RuntimeError as e : # \u8bd5\u4e00\u4e0b GetRasterBand(10) print ( e ) sys . exit ( 1 ) \u904d\u5386\u6ce2\u6bb5 \u00b6 from osgeo import gdal import sys src_ds = gdal . Open ( \"merge.tif\" ) print ( \"\u6ce2\u6bb5\u4e2a\u6570: \" , src_ds . RasterCount ) for band in range ( src_ds . RasterCount ): band += 1 print ( \"\u83b7\u53d6\u6ce2\u6bb5: \" , band ) srcband = src_ds . GetRasterBand ( band ) if srcband is None : continue stats = srcband . GetStatistics ( True , True ) if stats is None : continue print ( \"[ STATS ] = Minimum= %.3f , Maximum= %.3f , Mean= %.3f , StdDev= %.3f \" % ( \\ stats [ 0 ], stats [ 1 ], stats [ 2 ], stats [ 3 ] )) \u83b7\u53d6\u6ce2\u6bb5\u4fe1\u606f \u00b6 from osgeo import gdal import sys gdal . UseExceptions () def main ( band_num , input_file ): src_ds = gdal . Open ( input_file ) try : srcband = src_ds . GetRasterBand ( band_num ) except RuntimeError as e : print ( e ) sys . exit ( 1 ) print ( \"[ NO DATA VALUE ] = \" , srcband . GetNoDataValue ()) print ( \"[ MIN ] = \" , srcband . GetMinimum ()) print ( \"[ MAX ] = \" , srcband . GetMaximum ()) print ( \"[ SCALE ] = \" , srcband . GetScale ()) print ( \"[ UNIT TYPE ] = \" , srcband . GetUnitType ()) ctable = srcband . GetColorTable () if ctable is None : print ( 'No ColorTable found' ) sys . exit ( 1 ) print ( \"[ COLOR TABLE COUNT ] = \" , ctable . GetCount ()) for i in range ( 0 , ctable . GetCount () ): entry = ctable . GetColorEntry ( i ) if not entry : continue print ( \"[ COLOR ENTRY RGB ] = \" , ctable . GetColorEntryAsRGB ( i , entry )) main ( 1 , \"merge.tif\" ) \u591a\u8fb9\u5f62\u5316\u6805\u683c\u6ce2\u6bb5 \u00b6 from osgeo import gdal , ogr import sys gdal . UseExceptions () src_ds = gdal . Open ( \"test.tif\" ) srcband = src_ds . GetRasterBand ( 3 ) dst_layername = \"POLYGONIZED_STUFF\" drv = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dst_ds = drv . CreateDataSource ( dst_layername + \".shp\" ) dst_layer = dst_ds . CreateLayer ( dst_layername , srs = None ) gdal . Polygonize ( srcband , None , dst_layer , - 1 , [], callback = None ) \u6805\u683c\u5316\u77e2\u91cf\u6570\u636e \u00b6 from osgeo import gdal , ogr # \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c pixel_size = 25 NoData_value = - 9999 vector_fn = 'test.shp' raster_fn = 'test.tif' # \u6253\u5f00\u6570\u636e\u5e76\u8bfb\u53d6\u8303\u56f4 source_ds = ogr . Open ( vector_fn ) source_layer = source_ds . GetLayer () x_min , x_max , y_min , y_max = source_layer . GetExtent () x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'GTiff' ) . Create ( raster_fn , x_res , y_res , 1 , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( NoData_value ) # \u6805\u683c\u5316 gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 0 ]) \u7528shapefile\u88c1\u526a\u6805\u683c \u00b6 from osgeo import gdal , gdalnumeric , ogr , osr from PIL import Image , ImageDraw import os , sys gdal . UseExceptions () def imageToArray ( i ): \"\"\" Image\u8f6c\u6362\u4e3a\u6570\u7ec4. \"\"\" a = gdalnumeric . fromstring ( i . tostring (), 'b' ) a . shape = i . im . size [ 1 ], i . im . size [ 0 ] return a def arrayToImage ( a ): \"\"\" \u6570\u7ec4\u8f6c\u6362\u4e3aImage. \"\"\" i = Image . fromstring ( 'L' ,( a . shape [ 1 ], a . shape [ 0 ]), ( a . astype ( 'b' )) . tostring ()) return i def world2Pixel ( geoMatrix , x , y ): \"\"\" \u7528\u5730\u7406\u4eff\u5c04\u53d8\u6362\u8ba1\u7b97\u50cf\u7d20\u5750\u6807 \"\"\" ulX = geoMatrix [ 0 ] ulY = geoMatrix [ 3 ] xDist = geoMatrix [ 1 ] yDist = geoMatrix [ 5 ] rtnX = geoMatrix [ 2 ] rtnY = geoMatrix [ 4 ] pixel = int (( x - ulX ) / xDist ) line = int (( ulY - y ) / xDist ) return ( pixel , line ) # # EDIT: this is basically an overloaded # version of the gdal_array.OpenArray passing in xoff, yoff explicitly # so we can pass these params off to CopyDatasetInfo # def OpenArray ( array , prototype_ds = None , xoff = 0 , yoff = 0 ): ds = gdal . Open ( gdalnumeric . GetArrayFilename ( array ) ) if ds is not None and prototype_ds is not None : if type ( prototype_ds ) . __name__ == 'str' : prototype_ds = gdal . Open ( prototype_ds ) if prototype_ds is not None : gdalnumeric . CopyDatasetInfo ( prototype_ds , ds , xoff = xoff , yoff = yoff ) return ds def histogram ( a , bins = range ( 0 , 256 )): \"\"\" Histogram function for multi-dimensional array. a = array bins = range of numbers to match \"\"\" fa = a . flat n = gdalnumeric . searchsorted ( gdalnumeric . sort ( fa ), bins ) n = gdalnumeric . concatenate ([ n , [ len ( fa )]]) hist = n [ 1 :] - n [: - 1 ] return hist def stretch ( a ): \"\"\" Performs a histogram stretch on a gdalnumeric array image. \"\"\" hist = histogram ( a ) im = arrayToImage ( a ) lut = [] for b in range ( 0 , len ( hist ), 256 ): # step size step = reduce ( operator . add , hist [ b : b + 256 ]) / 255 # create equalization lookup table n = 0 for i in range ( 256 ): lut . append ( n / step ) n = n + hist [ i + b ] im = im . point ( lut ) return imageToArray ( im ) def main ( shapefile_path , raster_path ): # \u8bfb\u53d6\u6570\u636e\u5230\u6570\u7ec4 srcArray = gdalnumeric . LoadFile ( raster_path ) # \u83b7\u53d6\u5730\u7406\u4eff\u5c04\u53d8\u6362 srcImage = gdal . Open ( raster_path ) geoTrans = srcImage . GetGeoTransform () # \u83b7\u53d6\u77e2\u91cf\u56fe\u5c42 shapef = ogr . Open ( shapefile_path ) lyr = shapef . GetLayer ( os . path . split ( os . path . splitext ( shapefile_path )[ 0 ] )[ 1 ] ) poly = lyr . GetNextFeature () # \u83b7\u53d6\u8303\u56f4 minX , maxX , minY , maxY = lyr . GetExtent () ulX , ulY = world2Pixel ( geoTrans , minX , maxY ) lrX , lrY = world2Pixel ( geoTrans , maxX , minY ) # \u8ba1\u7b97\u50cf\u7d20\u5927\u5c0f pxWidth = int ( lrX - ulX ) pxHeight = int ( lrY - ulY ) clip = srcArray [:, ulY : lrY , ulX : lrX ] # # \u50cf\u7d20\u504f\u79fb # xoffset = ulX yoffset = ulY print ( \"Xoffset, Yoffset = ( %f , %f )\" % ( xoffset , yoffset )) # \u521b\u5efa\u65b0\u7684\u4eff\u5c04\u53d8\u6362 geoTrans = list ( geoTrans ) geoTrans [ 0 ] = minX geoTrans [ 3 ] = maxY # Map points to pixels for drawing the # boundary on a blank 8-bit, # black and white, mask image. points = [] pixels = [] geom = poly . GetGeometryRef () pts = geom . GetGeometryRef ( 0 ) for p in range ( pts . GetPointCount ()): points . append (( pts . GetX ( p ), pts . GetY ( p ))) for p in points : pixels . append ( world2Pixel ( geoTrans , p [ 0 ], p [ 1 ])) rasterPoly = Image . new ( \"L\" , ( pxWidth , pxHeight ), 1 ) rasterize = ImageDraw . Draw ( rasterPoly ) rasterize . polygon ( pixels , 0 ) mask = imageToArray ( rasterPoly ) # Clip the image using the mask clip = gdalnumeric . choose ( mask , \\ ( clip , 0 )) . astype ( gdalnumeric . uint8 ) # This image has 3 bands so we stretch each one to make them # visually brighter for i in range ( 3 ): clip [ i ,:,:] = stretch ( clip [ i ,:,:]) # Save new tiff # # EDIT: instead of SaveArray, let's break all the # SaveArray steps out more explicity so # we can overwrite the offset of the destination # raster # ### the old way using SaveArray # # gdalnumeric.SaveArray(clip, \"OUTPUT.tif\", format=\"GTiff\", prototype=raster_path) # ### # gtiffDriver = gdal . GetDriverByName ( 'GTiff' ) if gtiffDriver is None : raise ValueError ( \"Can't find GeoTiff Driver\" ) gtiffDriver . CreateCopy ( \"OUTPUT.tif\" , OpenArray ( clip , prototype_ds = raster_path , xoff = xoffset , yoff = yoffset ) ) # Save as an 8-bit jpeg for an easy, quick preview clip = clip . astype ( gdalnumeric . uint8 ) gdalnumeric . SaveArray ( clip , \"OUTPUT.jpg\" , format = \"JPEG\" ) gdal . ErrorReset () if __name__ == '__main__' : # # example run : $ python clip.py /<full-path>/<shapefile-name>.shp /<full-path>/<raster-name>.tif # if len ( sys . argv ) < 2 : print \"[ ERROR ] you must two args. 1) the full shapefile path and 2) the full raster path\" sys . exit ( 1 ) main ( sys . argv [ 1 ], sys . argv [ 2 ] ) \u533a\u57df\u7edf\u8ba1 \u00b6 import gdal , ogr , osr , numpy import sys def zonal_stats ( feat , input_zone_polygon , input_value_raster ): # Open data raster = gdal . Open ( input_value_raster ) shp = ogr . Open ( input_zone_polygon ) lyr = shp . GetLayer () # Get raster georeference info transform = raster . GetGeoTransform () xOrigin = transform [ 0 ] yOrigin = transform [ 3 ] pixelWidth = transform [ 1 ] pixelHeight = transform [ 5 ] # Reproject vector geometry to same projection as raster sourceSR = lyr . GetSpatialRef () targetSR = osr . SpatialReference () targetSR . ImportFromWkt ( raster . GetProjectionRef ()) coordTrans = osr . CoordinateTransformation ( sourceSR , targetSR ) feat = lyr . GetNextFeature () geom = feat . GetGeometryRef () geom . Transform ( coordTrans ) # Get extent of feat geom = feat . GetGeometryRef () if ( geom . GetGeometryName () == 'MULTIPOLYGON' ): count = 0 pointsX = []; pointsY = [] for polygon in geom : geomInner = geom . GetGeometryRef ( count ) ring = geomInner . GetGeometryRef ( 0 ) numpoints = ring . GetPointCount () for p in range ( numpoints ): lon , lat , z = ring . GetPoint ( p ) pointsX . append ( lon ) pointsY . append ( lat ) count += 1 elif ( geom . GetGeometryName () == 'POLYGON' ): ring = geom . GetGeometryRef ( 0 ) numpoints = ring . GetPointCount () pointsX = []; pointsY = [] for p in range ( numpoints ): lon , lat , z = ring . GetPoint ( p ) pointsX . append ( lon ) pointsY . append ( lat ) else : sys . exit ( \"ERROR: Geometry needs to be either Polygon or Multipolygon\" ) xmin = min ( pointsX ) xmax = max ( pointsX ) ymin = min ( pointsY ) ymax = max ( pointsY ) # Specify offset and rows and columns to read xoff = int (( xmin - xOrigin ) / pixelWidth ) yoff = int (( yOrigin - ymax ) / pixelWidth ) xcount = int (( xmax - xmin ) / pixelWidth ) + 1 ycount = int (( ymax - ymin ) / pixelWidth ) + 1 # Create memory target raster target_ds = gdal . GetDriverByName ( 'MEM' ) . Create ( '' , xcount , ycount , 1 , gdal . GDT_Byte ) target_ds . SetGeoTransform (( xmin , pixelWidth , 0 , ymax , 0 , pixelHeight , )) # Create for target raster the same projection as for the value raster raster_srs = osr . SpatialReference () raster_srs . ImportFromWkt ( raster . GetProjectionRef ()) target_ds . SetProjection ( raster_srs . ExportToWkt ()) # Rasterize zone polygon to raster gdal . RasterizeLayer ( target_ds , [ 1 ], lyr , burn_values = [ 1 ]) # Read raster as arrays banddataraster = raster . GetRasterBand ( 1 ) dataraster = banddataraster . ReadAsArray ( xoff , yoff , xcount , ycount ) . astype ( numpy . float ) bandmask = target_ds . GetRasterBand ( 1 ) datamask = bandmask . ReadAsArray ( 0 , 0 , xcount , ycount ) . astype ( numpy . float ) # Mask zone of raster zoneraster = numpy . ma . masked_array ( dataraster , numpy . logical_not ( datamask )) # Calculate statistics of zonal raster return numpy . average ( zoneraster ), numpy . mean ( zoneraster ), numpy . median ( zoneraster ), numpy . std ( zoneraster ), numpy . var ( zoneraster ) def loop_zonal_stats ( input_zone_polygon , input_value_raster ): shp = ogr . Open ( input_zone_polygon ) lyr = shp . GetLayer () featList = range ( lyr . GetFeatureCount ()) statDict = {} for FID in featList : feat = lyr . GetFeature ( FID ) meanValue = zonal_stats ( feat , input_zone_polygon , input_value_raster ) statDict [ FID ] = meanValue return statDict def main ( input_zone_polygon , input_value_raster ): return loop_zonal_stats ( input_zone_polygon , input_value_raster ) if __name__ == \"__main__\" : # # Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance # # example run : $ python grid.py <full-path><output-shapefile-name>.shp xmin xmax ymin ymax gridHeight gridWidth # if len ( sys . argv ) != 3 : print \"[ ERROR ] you must supply two arguments: input-zone-shapefile-name.shp input-value-raster-name.tif \" sys . exit ( 1 ) print 'Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance' print main ( sys . argv [ 1 ], sys . argv [ 2 ] ) \u4ece\u6570\u7ec4\u521b\u5efa\u6805\u683c \u00b6 import gdal , ogr , os , osr import numpy as np def array2raster ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array ): cols = array . shape [ 1 ] rows = array . shape [ 0 ] originX = rasterOrigin [ 0 ] originY = rasterOrigin [ 1 ] driver = gdal . GetDriverByName ( 'GTiff' ) outRaster = driver . Create ( newRasterfn , cols , rows , 1 , gdal . GDT_Byte ) outRaster . SetGeoTransform (( originX , pixelWidth , 0 , originY , 0 , pixelHeight )) outband = outRaster . GetRasterBand ( 1 ) outband . WriteArray ( array ) outRasterSRS = osr . SpatialReference () outRasterSRS . ImportFromEPSG ( 4326 ) outRaster . SetProjection ( outRasterSRS . ExportToWkt ()) outband . FlushCache () def main ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array ): # \u53cd\u8f6c\u6570\u7ec4 reversed_arr = array [:: - 1 ] # \u6570\u7ec4\u8f6c\u6805\u683c array2raster ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , reversed_arr ) if __name__ == \"__main__\" : rasterOrigin = ( - 123.25745 , 45.43013 ) pixelWidth = 10 pixelHeight = 10 newRasterfn = 'test.tif' array = np . array ([[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ]]) main ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array ) \u66ff\u6362\u65e0\u6548\u503c \u00b6 import gdal , ogr , osr , os import numpy as np def raster2array ( rasterfn ): raster = gdal . Open ( rasterfn ) band = raster . GetRasterBand ( 1 ) return band . ReadAsArray () def getNoDataValue ( rasterfn ): raster = gdal . Open ( rasterfn ) band = raster . GetRasterBand ( 1 ) return band . GetNoDataValue () def array2raster ( rasterfn , newRasterfn , array ): raster = gdal . Open ( rasterfn ) geotransform = raster . GetGeoTransform () originX = geotransform [ 0 ] originY = geotransform [ 3 ] pixelWidth = geotransform [ 1 ] pixelHeight = geotransform [ 5 ] cols = raster . RasterXSize rows = raster . RasterYSize driver = gdal . GetDriverByName ( 'GTiff' ) outRaster = driver . Create ( newRasterfn , cols , rows , 1 , gdal . GDT_Float32 ) outRaster . SetGeoTransform (( originX , pixelWidth , 0 , originY , 0 , pixelHeight )) outband = outRaster . GetRasterBand ( 1 ) outband . WriteArray ( array ) outRasterSRS = osr . SpatialReference () outRasterSRS . ImportFromWkt ( raster . GetProjectionRef ()) outRaster . SetProjection ( outRasterSRS . ExportToWkt ()) outband . FlushCache () rasterfn = 'test.tif' newValue = 0 newRasterfn = 'testNew.tif' # \u6805\u683c\u8f6c\u6570\u7ec4 rasterArray = raster2array ( rasterfn ) # \u83b7\u53d6\u65e0\u6548\u503c noDataValue = getNoDataValue ( rasterfn ) # \u66f4\u65b0\u65e0\u6548\u503c rasterArray [ rasterArray == noDataValue ] = newValue # \u6570\u7ec4\u8f6c\u6805\u683c array2raster ( rasterfn , newRasterfn , rasterArray )","title":"\u6805\u683c\u56fe\u5c42"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_1","text":"","title":"\u6805\u683c\u56fe\u5c42"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_2","text":"from osgeo import gdal # \u6253\u5f00\u6570\u636e ds = gdal . Open ( 'test.tif' ) # \u5173\u95ed\u6570\u636e\uff08\u975e\u5fc5\u987b\uff09 ds = None","title":"\u5173\u95ed\u6805\u683c\u6570\u636e"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_3","text":"from osgeo import gdal gtif = gdal.Open( \"merge.tif\" ) print (gtif.GetMetadata())","title":"\u83b7\u53d6\u5143\u6570\u636e"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_4","text":"from osgeo import gdal # \u6253\u5f00\u6570\u636e ds1 = gdal . Open ( \"LM51130321998341HAJ00_B1.TIF\" ) ds2 = gdal . Open ( \"LM51130321998341HAJ00_B2.TIF\" ) ds3 = gdal . Open ( \"LM51130321998341HAJ00_B3.TIF\" ) ds4 = gdal . Open ( \"LM51130321998341HAJ00_B4.TIF\" ) # \u83b7\u53d6\u6ce2\u6bb5 b1 = ds1 . GetRasterBand ( 1 ) b2 = ds1 . GetRasterBand ( 1 ) b3 = ds1 . GetRasterBand ( 1 ) b4 = ds1 . GetRasterBand ( 1 ) # \u521b\u5efa\u6570\u636e driver = gdal . GetDriverByName ( \"GTiff\" ) out_ds = driver . Create ( 'merge.tif' , ds1 . RasterXSize , ds1 . RasterYSize , 4 , gdal . GDT_Byte ) # \u8bbe\u7f6e\u5750\u6807\u548c\u6295\u5f71 out_ds . SetGeoTransform ( ds1 . GetGeoTransform ()) out_ds . SetProjection ( ds1 . GetProjection ()) ob1 = out_ds . GetRasterBand ( 1 ) ob2 = out_ds . GetRasterBand ( 2 ) ob3 = out_ds . GetRasterBand ( 3 ) ob4 = out_ds . GetRasterBand ( 4 ) # \u5199\u5165\u6570\u636e ob1 . WriteArray ( b1 . ReadAsArray ()) ob2 . WriteArray ( b2 . ReadAsArray ()) ob3 . WriteArray ( b3 . ReadAsArray ()) ob4 . WriteArray ( b4 . ReadAsArray ()) out_ds = None","title":"\u6ce2\u6bb5\u878d\u5408"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_5","text":"from osgeo import gdal import sys # \u5141\u8bb8python\u5f02\u5e38 gdal . UseExceptions () try : src_ds = gdal . Open ( \"merge.tif\" ) except RuntimeError as e : print ( e ) sys . exit ( 1 ) try : srcband = src_ds . GetRasterBand ( 1 ) except RuntimeError as e : # \u8bd5\u4e00\u4e0b GetRasterBand(10) print ( e ) sys . exit ( 1 )","title":"\u83b7\u53d6\u6ce2\u6bb5"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_6","text":"from osgeo import gdal import sys src_ds = gdal . Open ( \"merge.tif\" ) print ( \"\u6ce2\u6bb5\u4e2a\u6570: \" , src_ds . RasterCount ) for band in range ( src_ds . RasterCount ): band += 1 print ( \"\u83b7\u53d6\u6ce2\u6bb5: \" , band ) srcband = src_ds . GetRasterBand ( band ) if srcband is None : continue stats = srcband . GetStatistics ( True , True ) if stats is None : continue print ( \"[ STATS ] = Minimum= %.3f , Maximum= %.3f , Mean= %.3f , StdDev= %.3f \" % ( \\ stats [ 0 ], stats [ 1 ], stats [ 2 ], stats [ 3 ] ))","title":"\u904d\u5386\u6ce2\u6bb5"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_7","text":"from osgeo import gdal import sys gdal . UseExceptions () def main ( band_num , input_file ): src_ds = gdal . Open ( input_file ) try : srcband = src_ds . GetRasterBand ( band_num ) except RuntimeError as e : print ( e ) sys . exit ( 1 ) print ( \"[ NO DATA VALUE ] = \" , srcband . GetNoDataValue ()) print ( \"[ MIN ] = \" , srcband . GetMinimum ()) print ( \"[ MAX ] = \" , srcband . GetMaximum ()) print ( \"[ SCALE ] = \" , srcband . GetScale ()) print ( \"[ UNIT TYPE ] = \" , srcband . GetUnitType ()) ctable = srcband . GetColorTable () if ctable is None : print ( 'No ColorTable found' ) sys . exit ( 1 ) print ( \"[ COLOR TABLE COUNT ] = \" , ctable . GetCount ()) for i in range ( 0 , ctable . GetCount () ): entry = ctable . GetColorEntry ( i ) if not entry : continue print ( \"[ COLOR ENTRY RGB ] = \" , ctable . GetColorEntryAsRGB ( i , entry )) main ( 1 , \"merge.tif\" )","title":"\u83b7\u53d6\u6ce2\u6bb5\u4fe1\u606f"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_8","text":"from osgeo import gdal , ogr import sys gdal . UseExceptions () src_ds = gdal . Open ( \"test.tif\" ) srcband = src_ds . GetRasterBand ( 3 ) dst_layername = \"POLYGONIZED_STUFF\" drv = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dst_ds = drv . CreateDataSource ( dst_layername + \".shp\" ) dst_layer = dst_ds . CreateLayer ( dst_layername , srs = None ) gdal . Polygonize ( srcband , None , dst_layer , - 1 , [], callback = None )","title":"\u591a\u8fb9\u5f62\u5316\u6805\u683c\u6ce2\u6bb5"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_9","text":"from osgeo import gdal , ogr # \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c pixel_size = 25 NoData_value = - 9999 vector_fn = 'test.shp' raster_fn = 'test.tif' # \u6253\u5f00\u6570\u636e\u5e76\u8bfb\u53d6\u8303\u56f4 source_ds = ogr . Open ( vector_fn ) source_layer = source_ds . GetLayer () x_min , x_max , y_min , y_max = source_layer . GetExtent () x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'GTiff' ) . Create ( raster_fn , x_res , y_res , 1 , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( NoData_value ) # \u6805\u683c\u5316 gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 0 ])","title":"\u6805\u683c\u5316\u77e2\u91cf\u6570\u636e"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#shapefile","text":"from osgeo import gdal , gdalnumeric , ogr , osr from PIL import Image , ImageDraw import os , sys gdal . UseExceptions () def imageToArray ( i ): \"\"\" Image\u8f6c\u6362\u4e3a\u6570\u7ec4. \"\"\" a = gdalnumeric . fromstring ( i . tostring (), 'b' ) a . shape = i . im . size [ 1 ], i . im . size [ 0 ] return a def arrayToImage ( a ): \"\"\" \u6570\u7ec4\u8f6c\u6362\u4e3aImage. \"\"\" i = Image . fromstring ( 'L' ,( a . shape [ 1 ], a . shape [ 0 ]), ( a . astype ( 'b' )) . tostring ()) return i def world2Pixel ( geoMatrix , x , y ): \"\"\" \u7528\u5730\u7406\u4eff\u5c04\u53d8\u6362\u8ba1\u7b97\u50cf\u7d20\u5750\u6807 \"\"\" ulX = geoMatrix [ 0 ] ulY = geoMatrix [ 3 ] xDist = geoMatrix [ 1 ] yDist = geoMatrix [ 5 ] rtnX = geoMatrix [ 2 ] rtnY = geoMatrix [ 4 ] pixel = int (( x - ulX ) / xDist ) line = int (( ulY - y ) / xDist ) return ( pixel , line ) # # EDIT: this is basically an overloaded # version of the gdal_array.OpenArray passing in xoff, yoff explicitly # so we can pass these params off to CopyDatasetInfo # def OpenArray ( array , prototype_ds = None , xoff = 0 , yoff = 0 ): ds = gdal . Open ( gdalnumeric . GetArrayFilename ( array ) ) if ds is not None and prototype_ds is not None : if type ( prototype_ds ) . __name__ == 'str' : prototype_ds = gdal . Open ( prototype_ds ) if prototype_ds is not None : gdalnumeric . CopyDatasetInfo ( prototype_ds , ds , xoff = xoff , yoff = yoff ) return ds def histogram ( a , bins = range ( 0 , 256 )): \"\"\" Histogram function for multi-dimensional array. a = array bins = range of numbers to match \"\"\" fa = a . flat n = gdalnumeric . searchsorted ( gdalnumeric . sort ( fa ), bins ) n = gdalnumeric . concatenate ([ n , [ len ( fa )]]) hist = n [ 1 :] - n [: - 1 ] return hist def stretch ( a ): \"\"\" Performs a histogram stretch on a gdalnumeric array image. \"\"\" hist = histogram ( a ) im = arrayToImage ( a ) lut = [] for b in range ( 0 , len ( hist ), 256 ): # step size step = reduce ( operator . add , hist [ b : b + 256 ]) / 255 # create equalization lookup table n = 0 for i in range ( 256 ): lut . append ( n / step ) n = n + hist [ i + b ] im = im . point ( lut ) return imageToArray ( im ) def main ( shapefile_path , raster_path ): # \u8bfb\u53d6\u6570\u636e\u5230\u6570\u7ec4 srcArray = gdalnumeric . LoadFile ( raster_path ) # \u83b7\u53d6\u5730\u7406\u4eff\u5c04\u53d8\u6362 srcImage = gdal . Open ( raster_path ) geoTrans = srcImage . GetGeoTransform () # \u83b7\u53d6\u77e2\u91cf\u56fe\u5c42 shapef = ogr . Open ( shapefile_path ) lyr = shapef . GetLayer ( os . path . split ( os . path . splitext ( shapefile_path )[ 0 ] )[ 1 ] ) poly = lyr . GetNextFeature () # \u83b7\u53d6\u8303\u56f4 minX , maxX , minY , maxY = lyr . GetExtent () ulX , ulY = world2Pixel ( geoTrans , minX , maxY ) lrX , lrY = world2Pixel ( geoTrans , maxX , minY ) # \u8ba1\u7b97\u50cf\u7d20\u5927\u5c0f pxWidth = int ( lrX - ulX ) pxHeight = int ( lrY - ulY ) clip = srcArray [:, ulY : lrY , ulX : lrX ] # # \u50cf\u7d20\u504f\u79fb # xoffset = ulX yoffset = ulY print ( \"Xoffset, Yoffset = ( %f , %f )\" % ( xoffset , yoffset )) # \u521b\u5efa\u65b0\u7684\u4eff\u5c04\u53d8\u6362 geoTrans = list ( geoTrans ) geoTrans [ 0 ] = minX geoTrans [ 3 ] = maxY # Map points to pixels for drawing the # boundary on a blank 8-bit, # black and white, mask image. points = [] pixels = [] geom = poly . GetGeometryRef () pts = geom . GetGeometryRef ( 0 ) for p in range ( pts . GetPointCount ()): points . append (( pts . GetX ( p ), pts . GetY ( p ))) for p in points : pixels . append ( world2Pixel ( geoTrans , p [ 0 ], p [ 1 ])) rasterPoly = Image . new ( \"L\" , ( pxWidth , pxHeight ), 1 ) rasterize = ImageDraw . Draw ( rasterPoly ) rasterize . polygon ( pixels , 0 ) mask = imageToArray ( rasterPoly ) # Clip the image using the mask clip = gdalnumeric . choose ( mask , \\ ( clip , 0 )) . astype ( gdalnumeric . uint8 ) # This image has 3 bands so we stretch each one to make them # visually brighter for i in range ( 3 ): clip [ i ,:,:] = stretch ( clip [ i ,:,:]) # Save new tiff # # EDIT: instead of SaveArray, let's break all the # SaveArray steps out more explicity so # we can overwrite the offset of the destination # raster # ### the old way using SaveArray # # gdalnumeric.SaveArray(clip, \"OUTPUT.tif\", format=\"GTiff\", prototype=raster_path) # ### # gtiffDriver = gdal . GetDriverByName ( 'GTiff' ) if gtiffDriver is None : raise ValueError ( \"Can't find GeoTiff Driver\" ) gtiffDriver . CreateCopy ( \"OUTPUT.tif\" , OpenArray ( clip , prototype_ds = raster_path , xoff = xoffset , yoff = yoffset ) ) # Save as an 8-bit jpeg for an easy, quick preview clip = clip . astype ( gdalnumeric . uint8 ) gdalnumeric . SaveArray ( clip , \"OUTPUT.jpg\" , format = \"JPEG\" ) gdal . ErrorReset () if __name__ == '__main__' : # # example run : $ python clip.py /<full-path>/<shapefile-name>.shp /<full-path>/<raster-name>.tif # if len ( sys . argv ) < 2 : print \"[ ERROR ] you must two args. 1) the full shapefile path and 2) the full raster path\" sys . exit ( 1 ) main ( sys . argv [ 1 ], sys . argv [ 2 ] )","title":"\u7528shapefile\u88c1\u526a\u6805\u683c"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_10","text":"import gdal , ogr , osr , numpy import sys def zonal_stats ( feat , input_zone_polygon , input_value_raster ): # Open data raster = gdal . Open ( input_value_raster ) shp = ogr . Open ( input_zone_polygon ) lyr = shp . GetLayer () # Get raster georeference info transform = raster . GetGeoTransform () xOrigin = transform [ 0 ] yOrigin = transform [ 3 ] pixelWidth = transform [ 1 ] pixelHeight = transform [ 5 ] # Reproject vector geometry to same projection as raster sourceSR = lyr . GetSpatialRef () targetSR = osr . SpatialReference () targetSR . ImportFromWkt ( raster . GetProjectionRef ()) coordTrans = osr . CoordinateTransformation ( sourceSR , targetSR ) feat = lyr . GetNextFeature () geom = feat . GetGeometryRef () geom . Transform ( coordTrans ) # Get extent of feat geom = feat . GetGeometryRef () if ( geom . GetGeometryName () == 'MULTIPOLYGON' ): count = 0 pointsX = []; pointsY = [] for polygon in geom : geomInner = geom . GetGeometryRef ( count ) ring = geomInner . GetGeometryRef ( 0 ) numpoints = ring . GetPointCount () for p in range ( numpoints ): lon , lat , z = ring . GetPoint ( p ) pointsX . append ( lon ) pointsY . append ( lat ) count += 1 elif ( geom . GetGeometryName () == 'POLYGON' ): ring = geom . GetGeometryRef ( 0 ) numpoints = ring . GetPointCount () pointsX = []; pointsY = [] for p in range ( numpoints ): lon , lat , z = ring . GetPoint ( p ) pointsX . append ( lon ) pointsY . append ( lat ) else : sys . exit ( \"ERROR: Geometry needs to be either Polygon or Multipolygon\" ) xmin = min ( pointsX ) xmax = max ( pointsX ) ymin = min ( pointsY ) ymax = max ( pointsY ) # Specify offset and rows and columns to read xoff = int (( xmin - xOrigin ) / pixelWidth ) yoff = int (( yOrigin - ymax ) / pixelWidth ) xcount = int (( xmax - xmin ) / pixelWidth ) + 1 ycount = int (( ymax - ymin ) / pixelWidth ) + 1 # Create memory target raster target_ds = gdal . GetDriverByName ( 'MEM' ) . Create ( '' , xcount , ycount , 1 , gdal . GDT_Byte ) target_ds . SetGeoTransform (( xmin , pixelWidth , 0 , ymax , 0 , pixelHeight , )) # Create for target raster the same projection as for the value raster raster_srs = osr . SpatialReference () raster_srs . ImportFromWkt ( raster . GetProjectionRef ()) target_ds . SetProjection ( raster_srs . ExportToWkt ()) # Rasterize zone polygon to raster gdal . RasterizeLayer ( target_ds , [ 1 ], lyr , burn_values = [ 1 ]) # Read raster as arrays banddataraster = raster . GetRasterBand ( 1 ) dataraster = banddataraster . ReadAsArray ( xoff , yoff , xcount , ycount ) . astype ( numpy . float ) bandmask = target_ds . GetRasterBand ( 1 ) datamask = bandmask . ReadAsArray ( 0 , 0 , xcount , ycount ) . astype ( numpy . float ) # Mask zone of raster zoneraster = numpy . ma . masked_array ( dataraster , numpy . logical_not ( datamask )) # Calculate statistics of zonal raster return numpy . average ( zoneraster ), numpy . mean ( zoneraster ), numpy . median ( zoneraster ), numpy . std ( zoneraster ), numpy . var ( zoneraster ) def loop_zonal_stats ( input_zone_polygon , input_value_raster ): shp = ogr . Open ( input_zone_polygon ) lyr = shp . GetLayer () featList = range ( lyr . GetFeatureCount ()) statDict = {} for FID in featList : feat = lyr . GetFeature ( FID ) meanValue = zonal_stats ( feat , input_zone_polygon , input_value_raster ) statDict [ FID ] = meanValue return statDict def main ( input_zone_polygon , input_value_raster ): return loop_zonal_stats ( input_zone_polygon , input_value_raster ) if __name__ == \"__main__\" : # # Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance # # example run : $ python grid.py <full-path><output-shapefile-name>.shp xmin xmax ymin ymax gridHeight gridWidth # if len ( sys . argv ) != 3 : print \"[ ERROR ] you must supply two arguments: input-zone-shapefile-name.shp input-value-raster-name.tif \" sys . exit ( 1 ) print 'Returns for each feature a dictionary item (FID) with the statistical values in the following order: Average, Mean, Medain, Standard Deviation, Variance' print main ( sys . argv [ 1 ], sys . argv [ 2 ] )","title":"\u533a\u57df\u7edf\u8ba1"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_11","text":"import gdal , ogr , os , osr import numpy as np def array2raster ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array ): cols = array . shape [ 1 ] rows = array . shape [ 0 ] originX = rasterOrigin [ 0 ] originY = rasterOrigin [ 1 ] driver = gdal . GetDriverByName ( 'GTiff' ) outRaster = driver . Create ( newRasterfn , cols , rows , 1 , gdal . GDT_Byte ) outRaster . SetGeoTransform (( originX , pixelWidth , 0 , originY , 0 , pixelHeight )) outband = outRaster . GetRasterBand ( 1 ) outband . WriteArray ( array ) outRasterSRS = osr . SpatialReference () outRasterSRS . ImportFromEPSG ( 4326 ) outRaster . SetProjection ( outRasterSRS . ExportToWkt ()) outband . FlushCache () def main ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array ): # \u53cd\u8f6c\u6570\u7ec4 reversed_arr = array [:: - 1 ] # \u6570\u7ec4\u8f6c\u6805\u683c array2raster ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , reversed_arr ) if __name__ == \"__main__\" : rasterOrigin = ( - 123.25745 , 45.43013 ) pixelWidth = 10 pixelHeight = 10 newRasterfn = 'test.tif' array = np . array ([[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ]]) main ( newRasterfn , rasterOrigin , pixelWidth , pixelHeight , array )","title":"\u4ece\u6570\u7ec4\u521b\u5efa\u6805\u683c"},{"location":"%E6%A0%85%E6%A0%BC%E5%9B%BE%E5%B1%82/#_12","text":"import gdal , ogr , osr , os import numpy as np def raster2array ( rasterfn ): raster = gdal . Open ( rasterfn ) band = raster . GetRasterBand ( 1 ) return band . ReadAsArray () def getNoDataValue ( rasterfn ): raster = gdal . Open ( rasterfn ) band = raster . GetRasterBand ( 1 ) return band . GetNoDataValue () def array2raster ( rasterfn , newRasterfn , array ): raster = gdal . Open ( rasterfn ) geotransform = raster . GetGeoTransform () originX = geotransform [ 0 ] originY = geotransform [ 3 ] pixelWidth = geotransform [ 1 ] pixelHeight = geotransform [ 5 ] cols = raster . RasterXSize rows = raster . RasterYSize driver = gdal . GetDriverByName ( 'GTiff' ) outRaster = driver . Create ( newRasterfn , cols , rows , 1 , gdal . GDT_Float32 ) outRaster . SetGeoTransform (( originX , pixelWidth , 0 , originY , 0 , pixelHeight )) outband = outRaster . GetRasterBand ( 1 ) outband . WriteArray ( array ) outRasterSRS = osr . SpatialReference () outRasterSRS . ImportFromWkt ( raster . GetProjectionRef ()) outRaster . SetProjection ( outRasterSRS . ExportToWkt ()) outband . FlushCache () rasterfn = 'test.tif' newValue = 0 newRasterfn = 'testNew.tif' # \u6805\u683c\u8f6c\u6570\u7ec4 rasterArray = raster2array ( rasterfn ) # \u83b7\u53d6\u65e0\u6548\u503c noDataValue = getNoDataValue ( rasterfn ) # \u66f4\u65b0\u65e0\u6548\u503c rasterArray [ rasterArray == noDataValue ] = newValue # \u6570\u7ec4\u8f6c\u6805\u683c array2raster ( rasterfn , newRasterfn , rasterArray )","title":"\u66ff\u6362\u65e0\u6548\u503c"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/","text":"\u77e2\u91cf\u56fe\u5c42 \u00b6 \u5220\u9664\u6587\u4ef6 \u00b6 from osgeo import ogr import os DriverName = \"ESRI Shapefile\" # e.g.: GeoJSON, ESRI Shapefile FileName = 'test.shp' driver = ogr . GetDriverByName ( DriverName ) if os . path . exists ( FileName ): driver . DeleteDataSource ( FileName ) \u83b7\u53d6OGR\u9a71\u52a8\u5217\u8868 \u00b6 import ogr cnt = ogr . GetDriverCount () formatsList = [] # Empty List for i in range ( cnt ): driver = ogr . GetDriver ( i ) driverName = driver . GetName () if not driverName in formatsList : formatsList . append ( driverName ) formatsList . sort () # \u6392\u5e8f print ( formatsList ) \u9a71\u52a8\u662f\u5426\u53ef\u7528 \u00b6 from osgeo import ogr ## Shapefile \u662f\u5426\u53ef\u7528? driverName = \"ESRI Shapefile\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## PostgreSQL \u662f\u5426\u53ef\u7528? driverName = \"PostgreSQL\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## File GeoDatabase \u662f\u5426\u53ef\u7528? driverName = \"FileGDB\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## SDE \u662f\u5426\u53ef\u7528? driverName = \"SDE\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) \u83b7\u53d6shapefile\u8981\u7d20\u4e2a\u6570 \u00b6 import os from osgeo import ogr daShapefile = r \"/test.shp\" driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataSource = driver . Open ( daShapefile , 0 ) # 0 \u53ea\u8bfb. 1 \u8bfb\u5199. # \u68c0\u67e5\u6570\u636e\u6e90\u662f\u5426\u6709\u6548. if dataSource is None : print ( '\u4e0d\u80fd\u6253\u5f00 %s ' % ( daShapefile )) else : print ( '\u6253\u5f00 %s ' % ( daShapefile )) layer = dataSource . GetLayer () featureCount = layer . GetFeatureCount () print ( \" %s \u8981\u7d20\u4e2a\u6570: %d \" % ( os . path . basename ( daShapefile ), featureCount )) \u83b7\u53d6PostGIS\u56fe\u5c42 \u00b6 from osgeo import ogr databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) conn = ogr . Open ( connString ) layerList = [] for i in conn : daLayer = i . GetName () if not daLayer in layerList : layerList . append ( daLayer ) layerList . sort () for j in layerList : print ( j ) # \u5173\u95ed\u8fde\u63a5 conn = None \u83b7\u53d6PostGIS\u56fe\u5c42\u7684\u8981\u7d20 \u00b6 from osgeo import ogr import sys databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) def GetPGLayer ( lyr_name ): conn = ogr . Open ( connString ) lyr = conn . GetLayer ( lyr_name ) if lyr is None : sys . exit ( 1 ) featureCount = lyr . GetFeatureCount () print ( \" %s \u8981\u7d20\u4e2a\u6570 : %d \" % ( lyr_name , featureCount )) # \u5173\u95ed\u8fde\u63a5 conn = None if __name__ == '__main__' : GetPGLayer ( \"test\" ) \u83b7\u53d6ESRI GDB\u56fe\u5c42 \u00b6 import sys from osgeo import ogr ogr . UseExceptions () driver = ogr . GetDriverByName ( \"OpenFileGDB\" ) # opening the FileGDB try : gdb = driver . Open ( \"/sparse.gdb\" , 0 ) except Exception as e : print ( e ) sys . exit () featsClassList = [] # \u83b7\u53d6\u56fe\u5c42 for featsClass_idx in range ( gdb . GetLayerCount ()): featsClass = gdb . GetLayerByIndex ( featsClass_idx ) featsClassList . append ( featsClass . GetName ()) featsClassList . sort () for featsClass in featsClassList : print ( featsClass ) \u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58 \u00b6 from osgeo import ogr # \u6253\u5f00\u8f93\u5165\u6570\u636e\u6e90 indriver = ogr . GetDriverByName ( 'SQLite' ) srcdb = indriver . Open ( '/poly_spatialite.sqlite' , 0 ) # \u521b\u5efa\u5185\u5b58\u8f93\u51fa\u6570\u636e\u6e90 outdriver = ogr . GetDriverByName ( 'MEMORY' ) source = outdriver . CreateDataSource ( 'memData' ) # \u6253\u5f00\u5185\u5b58\u6570\u636e tmp = outdriver . Open ( 'memData' , 1 ) # \u590d\u5236\u56fe\u5c42\u5230\u5185\u5b58 poly_mem = source . CopyLayer ( srcdb . GetLayer ( 'poly' ), 'poly' ,[ 'OVERWRITE=YES' ]) # \u65b0\u7684\u56fe\u5c42\u53ef\u76f4\u63a5\u88ab\u8bbf\u95ee\uff0cpoly_mem \u6216\u8005 source.GetLayer('poly'): layer = source . GetLayer ( 'poly' ) for feature in layer : feature . SetField ( 'area' , 1 ) \u904d\u5386\u8981\u7d20 \u00b6 from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () for feature in layer : print ( feature . GetField ( \"area\" )) layer . ResetReading () \u904d\u5386\u8981\u7d20\u51e0\u4f55 \u00b6 from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () for feature in layer : geom = feature . GetGeometryRef () # \u83b7\u53d6\u8d28\u5fc3 print ( geom . Centroid () . ExportToWkt ()) \u8fc7\u6ee4\u5c5e\u6027 \u00b6 from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () layer . SetAttributeFilter ( \"area = 5268.813\" ) for feature in layer : print ( feature . GetField ( \"area\" )) \u7a7a\u95f4\u8fc7\u6ee4 \u00b6 from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () wkt = \"POLYGON ((479386 4764749,481098 4764226,480772 4763114,478681 4763159,479386 4764749))\" layer . SetSpatialFilter ( ogr . CreateGeometryFromWkt ( wkt )) for feature in layer : print ( feature . GetField ( \"area\" )) \u83b7\u53d6\u8981\u7d20\u5b57\u6bb5 \u00b6 from osgeo import ogr daShapefile = r \"/test.shp\" dataSource = ogr . Open ( daShapefile ) daLayer = dataSource . GetLayer ( 0 ) layerDefinition = daLayer . GetLayerDefn () for i in range ( layerDefinition . GetFieldCount ()): fieldName = layerDefinition . GetFieldDefn ( i ) . GetName () fieldTypeCode = layerDefinition . GetFieldDefn ( i ) . GetType () fieldType = layerDefinition . GetFieldDefn ( i ) . GetFieldTypeName ( fieldTypeCode ) fieldWidth = layerDefinition . GetFieldDefn ( i ) . GetWidth () GetPrecision = layerDefinition . GetFieldDefn ( i ) . GetPrecision () print ( fieldName + \" - \" + fieldType + \" \" + str ( fieldWidth ) + \" \" + str ( GetPrecision )) \u83b7\u53d6PostGIS\u56fe\u5c42\u5b57\u6bb5 \u00b6 from osgeo import ogr import sys databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) def GetPGLayerFields ( lyr_name ): conn = ogr . Open ( connString ) lyr = conn . GetLayer ( lyr_name ) if lyr is None : sys . exit ( 1 ) lyrDefn = lyr . GetLayerDefn () for i in range ( lyrDefn . GetFieldCount () ): fieldName = lyrDefn . GetFieldDefn ( i ) . GetName () fieldTypeCode = lyrDefn . GetFieldDefn ( i ) . GetType () fieldType = lyrDefn . GetFieldDefn ( i ) . GetFieldTypeName ( fieldTypeCode ) fieldWidth = lyrDefn . GetFieldDefn ( i ) . GetWidth () GetPrecision = lyrDefn . GetFieldDefn ( i ) . GetPrecision () print ( fieldName + \" - \" + fieldType + \" \" + str ( fieldWidth ) + \" \" + str ( GetPrecision )) if __name__ == '__main__' : GetPGLayerFields ( \"test\" ) \u83b7\u53d6\u56fe\u5c42\u80fd\u529b \u00b6 from osgeo import ogr ds = ogr . Open ( \"/test.shp\" , 0 ) layer = ds . GetLayer () capabilities = [ ogr . OLCRandomRead , ogr . OLCSequentialWrite , ogr . OLCRandomWrite , ogr . OLCFastSpatialFilter , ogr . OLCFastFeatureCount , ogr . OLCFastGetExtent , ogr . OLCCreateField , ogr . OLCDeleteField , ogr . OLCReorderFields , ogr . OLCAlterFieldDefn , ogr . OLCTransactions , ogr . OLCDeleteFeature , ogr . OLCFastSetNextByIndex , ogr . OLCStringsAsUTF8 , ogr . OLCIgnoreFields ] print ( \"\u56fe\u5c42\u80fd\u529b:\" ) for cap in capabilities : print ( \" %s = %s \" % ( cap , layer . TestCapability ( cap ))) WFS\u56fe\u5c42\u548c\u904d\u5386\u8981\u7d20 \u00b6 import sys from osgeo import ogr , osr , gdal # \u83b7\u53d6WFS\u9a71\u52a8 wfs_drv = ogr . GetDriverByName ( 'WFS' ) # \u52a0\u5feb\u67e5\u8be2\u591a\u56fe\u5c42WFS\u670d\u52a1 gdal . SetConfigOption ( 'OGR_WFS_LOAD_MULTIPLE_LAYER_DEFN' , 'NO' ) # \u8bbe\u7f6e\u5206\u9875\u7684\u914d\u7f6e\u3002\u9002\u7528\u4e8eWFS 2.0\u670d\u52a1\u4ee5\u53caWFS 1.0\u548c1.1\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u670d\u52a1\u3002 gdal . SetConfigOption ( 'OGR_WFS_PAGING_ALLOWED' , 'YES' ) gdal . SetConfigOption ( 'OGR_WFS_PAGE_SIZE' , '10000' ) url = 'http://sampleserver6.arcgisonline.com/arcgis/services/SampleWorldCities/MapServer/WFSServer' wfs_ds = wfs_drv . Open ( 'WFS:' + url ) if not wfs_ds : sys . exit ( '\u9519\u8bef: \u4e0d\u80fd\u6253\u5f00 WFS \u6570\u636e\u6e90' ) else : pass # \u904d\u5386\u56fe\u5c42 for i in range ( wfs_ds . GetLayerCount ()): layer = wfs_ds . GetLayerByIndex ( i ) srs = layer . GetSpatialRef () print ( 'Layer: %s , Features: %s , SR: %s ...' % ( layer . GetName (), layer . GetFeatureCount (), srs . ExportToWkt ()[ 0 : 50 ])) # \u904d\u5386\u8981\u7d20 feat = layer . GetNextFeature () while feat is not None : feat = layer . GetNextFeature () # do something more.. feat = None # \u83b7\u53d6\u6307\u5b9a\u56fe\u5c42 layer = wfs_ds . GetLayerByName ( \"esri:World\" ) if not layer : sys . exit ( '\u9519\u8bef\uff1a\u4e0d\u80fd\u627e\u5230\u56fe\u5c42\uff1aesri:World' ) else : pass \u8bbe\u7f6eHTTP\u4ee3\u7406 \u00b6 import sys from osgeo import ogr , osr , gdal server = 'proxy.example.com' port = 3128 # \u8bbe\u7f6e\u4ee3\u7406 gdal . SetConfigOption ( 'GDAL_HTTP_PROXY' , server + ':' + port ) # \u6ca1\u6709\u7528\u6237\u540d\u6216\u5bc6\u7801\u7684NTLM\u8bbe\u7f6e\u4ee3\u7406\u8eab\u4efd\u9a8c\u8bc1\u9009\u9879\uff0c\u56e0\u6b64\u5355\u70b9\u767b\u5f55\u6709\u6548 gdal . SetConfigOption ( 'GDAL_PROXY_AUTH' , 'NTLM' ) gdal . SetConfigOption ( 'GDAL_HTTP_PROXYUSERPWD' , ' : ' ) ds = ogr . Open ( 'http://featureserver/cities/.geojson' ) if not ds : sys . exit ( 'ERROR: can not open GeoJSON datasource' ) lyr = ds . GetLayer ( 'OGRGeoJSON' ) for feat in lyr : geom = feat . GetGeometryRef () print ( geom . ExportToWkt ()) \u8bfb\u53d6CSV\u7ecf\u7eac\u5ea6\u4f5c\u4e3aOGRVRTLayer \u00b6 GDAL/OGR\u5177\u6709 \u865a\u62df\u683c\u5f0f\u89c4\u8303 \uff0c\u8be5\u89c4\u8303\u5141\u8bb8\u4f60\u4ece\u8bf8\u5982CSV\u4e4b\u7c7b\u7684\u5e73\u9762\u8868\u6d3e\u751f\u56fe\u5c42\u2014\u2014\u5b83\u7684\u529f\u80fd\u8fdc\u4e0d\u6b62\u4e8e\u6b64\uff0c\u56e0\u6b64\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u8bfb\u53d6\u5e26\u6709X\u3001Y\u5217\u548c\u503c\u7684CSV\u3002\u8be5CSV\u6587\u4ef6\u7531XML\u6587\u4ef6\u5305\u88c5\uff0c\u8be5XML\u6587\u4ef6\u5c06\u5176\u63cf\u8ff0\u4e3aOGR\u5c42\u3002\u4ee5\u4e0b\u662f\u6240\u6709\u5fc5\u8981\u7684\u90e8\u5206\u548c\u4e00\u4e2a\u811a\u672c\uff0c\u8be5\u811a\u672c\u8bfb\u53d6XML\u6587\u4ef6\u5e76\u6253\u5370\u51fa\u70b9\u7684\u51e0\u4f55\u5f62\u72b6\u3002 CSV\u6587\u4ef6\uff1a ID,X,Y 1,-127.234343,47.234325 2,-127.003243,46.234343 3,-127.345646,45.234324 4,-126.234324,44.324234 XML\u6587\u4ef6 <OGRVRTDataSource> <OGRVRTLayer name= \"example\" > <SrcDataSource> example.csv </SrcDataSource> <SrcLayer> example </SrcLayer> <GeometryType> wkbPoint </GeometryType> <LayerSRS> WGS84 </LayerSRS> <GeometryField encoding= \"PointFromColumns\" x= \"X\" y= \"Y\" /> </OGRVRTLayer> </OGRVRTDataSource> from osgeo import ogr ogr . UseExceptions () inDataSource = ogr . Open ( \"example_wrapper.vrt\" ) lyr = inDataSource . GetLayer ( 'example' ) for feat in lyr : geom = feat . GetGeometryRef () print ( geom . ExportToWkt ()) \u8ba1\u7b97\u8303\u56f4 \u00b6 from osgeo import ogr import os # Get a Layer's Extent inShapefile = \"states.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () extent = inLayer . GetExtent () # \u521b\u5efa\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( extent [ 0 ], extent [ 2 ]) ring . AddPoint ( extent [ 1 ], extent [ 2 ]) ring . AddPoint ( extent [ 1 ], extent [ 3 ]) ring . AddPoint ( extent [ 0 ], extent [ 3 ]) ring . AddPoint ( extent [ 0 ], extent [ 2 ]) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # \u4fdd\u5b58\u5230\u65b0\u7684shp\u6587\u4ef6 outShapefile = \"new.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u6570\u636e\u6e90 outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"new\" , geom_type = ogr . wkbPolygon ) # \u6dfb\u52a0ID\u5b57\u6bb5 idField = ogr . FieldDefn ( \"id\" , ogr . OFTInteger ) outLayer . CreateField ( idField ) # \u521b\u5efa\u8981\u7d20 featureDefn = outLayer . GetLayerDefn () feature = ogr . Feature ( featureDefn ) feature . SetGeometry ( poly ) feature . SetField ( \"id\" , 1 ) outLayer . CreateFeature ( feature ) feature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None \u8ba1\u7b97\u51f8\u5305 \u00b6 from osgeo import ogr import os # \u83b7\u5f97\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () # \u51e0\u4f55\u96c6\u5408 geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) for feature in inLayer : geomcol . AddGeometry ( feature . GetGeometryRef ()) # \u8ba1\u7b97\u51f8\u5305 convexhull = geomcol . ConvexHull () # \u4fdd\u5b58 outShapefile = \"test_convexhull.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u8f93\u51fa outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"test_convexhull\" , geom_type = ogr . wkbPolygon ) # \u6dfb\u52a0ID\u5b57\u6bb5 idField = ogr . FieldDefn ( \"id\" , ogr . OFTInteger ) outLayer . CreateField ( idField ) # \u521b\u5efa\u8981\u7d20 featureDefn = outLayer . GetLayerDefn () feature = ogr . Feature ( featureDefn ) feature . SetGeometry ( convexhull ) feature . SetField ( \"id\" , 1 ) outLayer . CreateFeature ( feature ) feature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None \u8ba1\u7b97\u8d28\u5fc3 \u00b6 from osgeo import ogr import os ogr . UseExceptions () # \u8f93\u5165\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () # \u8f93\u51fa\u56fe\u5c42 outShapefile = \"test_centroids.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"test_centroids\" , geom_type = ogr . wkbPoint ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) outLayer . CreateField ( fieldDefn ) # \u83b7\u5f97\u8981\u7d20\u5b9a\u4e49 outLayerDefn = outLayer . GetLayerDefn () # \u6dfb\u52a0\u8981\u7d20 for i in range ( 0 , inLayer . GetFeatureCount ()): # \u8f93\u5165\u8981\u7d20 inFeature = inLayer . GetFeature ( i ) # \u8f93\u51fa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u8bbe\u7f6e\u5b57\u6bb5\u503c for i in range ( 0 , outLayerDefn . GetFieldCount ()): outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u8bbe\u7f6e\u8d28\u5fc3\u51e0\u4f55 geom = inFeature . GetGeometryRef () inFeature = None centroid = geom . Centroid () outFeature . SetGeometry ( centroid ) # \u6dfb\u52a0\u65b0\u8981\u7d20 outLayer . CreateFeature ( outFeature ) outFeature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None \u521b\u5efa\u65b0\u7684shp\u6570\u636e\u5e76\u6dfb\u52a0\u6570\u636e \u00b6 import osgeo.ogr as ogr import osgeo.osr as osr import csv , os # \u4f7f\u7528\u5b57\u5178\u8bfb\u53d6\u6570\u636e reader = csv . DictReader ( open ( \"volcano_data.txt\" , \"r\" ), delimiter = ' \\t ' , quoting = csv . QUOTE_NONE ) # \u9a71\u52a8 outShapefile = \"volcanoes.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( outShapefile ): driver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u6570\u636e\u6e90 data_source = driver . CreateDataSource ( outShapefile ) # \u521b\u5efa\u7a7a\u95f4\u53c2\u8003 WGS84 srs = osr . SpatialReference () srs . ImportFromEPSG ( 4326 ) # \u521b\u5efa\u56fe\u5c42 layer = data_source . CreateLayer ( \"volcanoes\" , srs , ogr . wkbPoint ) # \u6dfb\u52a0\u5b57\u6bb5 field_name = ogr . FieldDefn ( \"Name\" , ogr . OFTString ) field_name . SetWidth ( 24 ) layer . CreateField ( field_name ) field_region = ogr . FieldDefn ( \"Region\" , ogr . OFTString ) field_region . SetWidth ( 24 ) layer . CreateField ( field_region ) layer . CreateField ( ogr . FieldDefn ( \"Latitude\" , ogr . OFTReal )) layer . CreateField ( ogr . FieldDefn ( \"Longitude\" , ogr . OFTReal )) layer . CreateField ( ogr . FieldDefn ( \"Elevation\" , ogr . OFTInteger )) # \u5904\u7406\u6587\u672c for row in reader : # \u521b\u5efa\u8981\u7d20 feature = ogr . Feature ( layer . GetLayerDefn ()) # \u8bbe\u7f6e\u5c5e\u6027\u5b57\u6bb5 feature . SetField ( \"Name\" , row [ 'Name' ]) feature . SetField ( \"Region\" , row [ 'Region' ]) feature . SetField ( \"Latitude\" , row [ 'Latitude' ]) feature . SetField ( \"Longitude\" , row [ 'Longitude' ]) feature . SetField ( \"Elevation\" , row [ 'Elevation' ]) # \u521b\u5efaWKT wkt = \"POINT( %f %f )\" % ( float ( row [ 'Longitude' ]) , float ( row [ 'Latitude' ])) # \u521b\u5efa\u70b9 point = ogr . CreateGeometryFromWkt ( wkt ) # \u8bbe\u7f6e\u51e0\u4f55 feature . SetGeometry ( point ) # \u6dfb\u52a0\u8981\u7d20 layer . CreateFeature ( feature ) # \u5220\u9664\u5f15\u7528 feature = None # \u4fdd\u5b58\u5173\u95ed data_source = None \u4eceWKT\u521b\u5efaPostGIS\u8868 \u00b6 import ogr , osr database = 'test2020' usr = 'postgres' pw = '123456' table = 'testtest' wkt = \"POINT (1120351.5712494177 741921.4223245403)\" point = ogr . CreateGeometryFromWkt ( wkt ) connectionString = \"PG:dbname=' %s ' user=' %s ' password=' %s '\" % ( database , usr , pw ) ogrds = ogr . Open ( connectionString ) srs = osr . SpatialReference () srs . ImportFromEPSG ( 4326 ) layer = ogrds . CreateLayer ( table , srs , ogr . wkbPoint , [ 'OVERWRITE=YES' ] ) layerDefn = layer . GetLayerDefn () feature = ogr . Feature ( layerDefn ) feature . SetGeometry ( point ) layer . StartTransaction () layer . CreateFeature ( feature ) feature = None layer . CommitTransaction () \u8fc7\u6ee4\u548c\u9009\u62e9 \u00b6 ogr2ogr -f \"ESRI Shapefile\" junkmob.shp -select area -where \"area = 5268.813\" test.shp # \u8be5\u547d\u4ee4\u8bfb\u53d6parcel_address.shp\u5e76\u751f\u6210junkmob.shp\uff0carea=5268.813\u8f93\u51faarea\u5217 from osgeo import ogr import os , sys def main ( field_name_target ): # \u8f93\u5165\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () inLayer . SetAttributeFilter ( \"area = 5268.813\" ) # \u521b\u5efa\u8f93\u51fa\u56fe\u5c42 outShapefile = os . path . join ( os . path . split ( inShapefile )[ 0 ], \"junkmob.shp\" ) outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u8f93\u51fashp outDataSource = outDriver . CreateDataSource ( outShapefile ) out_lyr_name = os . path . splitext ( os . path . split ( outShapefile )[ 1 ] )[ 0 ] outLayer = outDataSource . CreateLayer ( out_lyr_name , geom_type = ogr . wkbMultiPolygon ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) fieldName = fieldDefn . GetName () if fieldName not in field_name_target : continue outLayer . CreateField ( fieldDefn ) # \u8981\u7d20\u5b9a\u4e49 outLayerDefn = outLayer . GetLayerDefn () # \u6dfb\u52a0\u8981\u7d20 for inFeature in inLayer : # \u521b\u5efa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u6dfb\u52a0\u5b57\u6bb5 for i in range ( 0 , outLayerDefn . GetFieldCount ()): fieldDefn = outLayerDefn . GetFieldDefn ( i ) fieldName = fieldDefn . GetName () if fieldName not in field_name_target : continue outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u8bbe\u7f6e\u51e0\u4f55 geom = inFeature . GetGeometryRef () outFeature . SetGeometry ( geom . Clone ()) # \u521b\u5efa\u8981\u7d20 outLayer . CreateFeature ( outFeature ) outFeature = None # \u4fdd\u5b58\u5173\u95ed inDataSource = None outDataSource = None main ( [ \"AREA\" , \"EAS_ID\" ]) \u5408\u5e76\u56fe\u5c42 \u00b6 import os , ogr , osr outputMergefn = 'merge.shp' directory = \"/Users/UserName/Downloads/\" fileStartsWith = 'test' fileEndsWith = '.shp' driverName = 'ESRI Shapefile' geometryType = ogr . wkbPolygon out_driver = ogr . GetDriverByName ( driverName ) if os . path . exists ( outputMergefn ): out_driver . DeleteDataSource ( outputMergefn ) out_ds = out_driver . CreateDataSource ( outputMergefn ) out_layer = out_ds . CreateLayer ( outputMergefn , geom_type = geometryType ) fileList = os . listdir ( directory ) for file in fileList : if file . startswith ( fileStartsWith ) and file . endswith ( fileEndsWith ): print file ds = ogr . Open ( directory + file ) lyr = ds . GetLayer () for feat in lyr : out_feat = ogr . Feature ( out_layer . GetLayerDefn ()) out_feat . SetGeometry ( feat . GetGeometryRef () . Clone ()) out_layer . CreateFeature ( out_feat ) out_feat = None out_layer . SyncToDisk () \u83b7\u53d6OSM\u8857\u9053\u540d\u79f0 \u00b6 TODO\uff1a\u6d4b\u8bd5 import ogr ds = ogr . Open ( 'test.osm' ) layer = ds . GetLayer () nameList = [] for feature in layer : if feature . GetField ( \"highway\" ) != None : name = feature . GetField ( \"name\" ) if name != None and name not in nameList : nameList . append ( name ) print ( nameList ) \u521b\u5efa\u9c7c\u7f51 \u00b6 import os , sys import ogr from math import ceil def main ( outputGridfn , xmin , xmax , ymin , ymax , gridHeight , gridWidth ): xmin = float ( xmin ) xmax = float ( xmax ) ymin = float ( ymin ) ymax = float ( ymax ) gridWidth = float ( gridWidth ) gridHeight = float ( gridHeight ) # get rows rows = ceil (( ymax - ymin ) / gridHeight ) # get columns cols = ceil (( xmax - xmin ) / gridWidth ) # start grid cell envelope ringXleftOrigin = xmin ringXrightOrigin = xmin + gridWidth ringYtopOrigin = ymax ringYbottomOrigin = ymax - gridHeight # create output file outDriver = ogr . GetDriverByName ( 'ESRI Shapefile' ) if os . path . exists ( outputGridfn ): os . remove ( outputGridfn ) outDataSource = outDriver . CreateDataSource ( outputGridfn ) outLayer = outDataSource . CreateLayer ( outputGridfn , geom_type = ogr . wkbPolygon ) featureDefn = outLayer . GetLayerDefn () # create grid cells countcols = 0 while countcols < cols : countcols += 1 # reset envelope for rows ringYtop = ringYtopOrigin ringYbottom = ringYbottomOrigin countrows = 0 while countrows < rows : countrows += 1 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( ringXleftOrigin , ringYtop ) ring . AddPoint ( ringXrightOrigin , ringYtop ) ring . AddPoint ( ringXrightOrigin , ringYbottom ) ring . AddPoint ( ringXleftOrigin , ringYbottom ) ring . AddPoint ( ringXleftOrigin , ringYtop ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # add new geom to layer outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( poly ) outLayer . CreateFeature ( outFeature ) outFeature = None # new envelope for next poly ringYtop = ringYtop - gridHeight ringYbottom = ringYbottom - gridHeight # new envelope for next poly ringXleftOrigin = ringXleftOrigin + gridWidth ringXrightOrigin = ringXrightOrigin + gridWidth # Save and close DataSources outDataSource = None if __name__ == \"__main__\" : # # example run : $ python grid.py <full-path><output-shapefile-name>.shp xmin xmax ymin ymax gridHeight gridWidth # if len ( sys . argv ) != 8 : print \"[ ERROR ] you must supply seven arguments: output-shapefile-name.shp xmin xmax ymin ymax gridHeight gridWidth\" sys . exit ( 1 ) main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 3 ], sys . argv [ 4 ], sys . argv [ 5 ], sys . argv [ 6 ], sys . argv [ 7 ] ) \u9762\u8f6c\u7ebf \u00b6 import ogr , os def poly2line ( input_poly , output_line ): source_ds = ogr . Open ( input_poly ) source_layer = source_ds . GetLayer () # polygon2geometryCollection geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) for feat in source_layer : geom = feat . GetGeometryRef () ring = geom . GetGeometryRef ( 0 ) geomcol . AddGeometry ( ring ) # geometryCollection2shp shpDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( output_line ): shpDriver . DeleteDataSource ( output_line ) outDataSource = shpDriver . CreateDataSource ( output_line ) outLayer = outDataSource . CreateLayer ( output_line , geom_type = ogr . wkbMultiLineString ) featureDefn = outLayer . GetLayerDefn () outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( geomcol ) outLayer . CreateFeature ( outFeature ) outFeature = None def main ( input_poly , output_line ): poly2line ( input_poly , output_line ) if __name__ == \"__main__\" : input_poly = 'test_polygon.shp' output_line = 'test_line.shp' main ( input_poly , output_line ) \u521b\u5efa\u7f13\u51b2\u533a \u00b6 import ogr , os def createBuffer ( inputfn , outputBufferfn , bufferDist ): inputds = ogr . Open ( inputfn ) inputlyr = inputds . GetLayer () shpdriver = ogr . GetDriverByName ( 'ESRI Shapefile' ) if os . path . exists ( outputBufferfn ): shpdriver . DeleteDataSource ( outputBufferfn ) outputBufferds = shpdriver . CreateDataSource ( outputBufferfn ) bufferlyr = outputBufferds . CreateLayer ( outputBufferfn , geom_type = ogr . wkbPolygon ) featureDefn = bufferlyr . GetLayerDefn () for feature in inputlyr : ingeom = feature . GetGeometryRef () geomBuffer = ingeom . Buffer ( bufferDist ) outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( geomBuffer ) bufferlyr . CreateFeature ( outFeature ) outFeature = None def main ( inputfn , outputBufferfn , bufferDist ): createBuffer ( inputfn , outputBufferfn , bufferDist ) if __name__ == \"__main__\" : inputfn = 'test.shp' outputBufferfn = 'testBuffer.shp' bufferDist = 10.0 main ( inputfn , outputBufferfn , bufferDist ) \u6805\u683c\u5316\u77e2\u91cf\u56fe\u5c42 \u00b6 import ogr , gdal vector_fn = 'test.shp' # \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c pixel_size = 25 NoData_value = 255 # \u6253\u5f00\u6570\u636e\u6e90\uff0c\u8bfb\u53d6\u6570\u636e\u8303\u56f4 source_ds = ogr . Open ( vector_fn ) source_layer = source_ds . GetLayer () source_srs = source_layer . GetSpatialRef () x_min , x_max , y_min , y_max = source_layer . GetExtent () # \u521b\u5efa\u76ee\u6807\u6570\u636e\u6e90 x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'MEM' ) . Create ( '' , x_res , y_res , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( NoData_value ) # \u6805\u683c\u5316 gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 1 ]) # \u8bfb\u53d6\u4e3a\u6570\u7ec4 array = band . ReadAsArray () print ( array ) \u9762\u8f6c\u70b9 \u00b6 TODO\uff1a\u6d4b\u8bd5 import ogr , gdal import numpy as np import os polygon_fn = 'test.shp' # Define pixel_size which equals distance betweens points pixel_size = 10 # Open the data source and read in the extent source_ds = ogr . Open ( polygon_fn ) source_layer = source_ds . GetLayer () x_min , x_max , y_min , y_max = source_layer . GetExtent () # Create the destination data source x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'GTiff' ) . Create ( 'temp.tif' , x_res , y_res , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( 255 ) # Rasterize gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 1 ]) # Read as array array = band . ReadAsArray () raster = gdal . Open ( 'temp.tif' ) geotransform = raster . GetGeoTransform () # Convert array to point coordinates count = 0 roadList = np . where ( array == 1 ) multipoint = ogr . Geometry ( ogr . wkbMultiPoint ) for indexY in roadList [ 0 ]: indexX = roadList [ 1 ][ count ] geotransform = raster . GetGeoTransform () originX = geotransform [ 0 ] originY = geotransform [ 3 ] pixelWidth = geotransform [ 1 ] pixelHeight = geotransform [ 5 ] Xcoord = originX + pixelWidth * indexX Ycoord = originY + pixelHeight * indexY point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( Xcoord , Ycoord ) multipoint . AddGeometry ( point ) count += 1 # Write point coordinates to Shapefile shpDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( 'points.shp' ): shpDriver . DeleteDataSource ( 'points.shp' ) outDataSource = shpDriver . CreateDataSource ( 'points.shp' ) outLayer = outDataSource . CreateLayer ( 'points.shp' , geom_type = ogr . wkbMultiPoint ) featureDefn = outLayer . GetLayerDefn () outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( multipoint ) outLayer . CreateFeature ( outFeature ) outFeature = None # Remove temporary files os . remove ( 'temp.tif' )","title":"\u77e2\u91cf\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_1","text":"","title":"\u77e2\u91cf\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_2","text":"from osgeo import ogr import os DriverName = \"ESRI Shapefile\" # e.g.: GeoJSON, ESRI Shapefile FileName = 'test.shp' driver = ogr . GetDriverByName ( DriverName ) if os . path . exists ( FileName ): driver . DeleteDataSource ( FileName )","title":"\u5220\u9664\u6587\u4ef6"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#ogr","text":"import ogr cnt = ogr . GetDriverCount () formatsList = [] # Empty List for i in range ( cnt ): driver = ogr . GetDriver ( i ) driverName = driver . GetName () if not driverName in formatsList : formatsList . append ( driverName ) formatsList . sort () # \u6392\u5e8f print ( formatsList )","title":"\u83b7\u53d6OGR\u9a71\u52a8\u5217\u8868"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_3","text":"from osgeo import ogr ## Shapefile \u662f\u5426\u53ef\u7528? driverName = \"ESRI Shapefile\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## PostgreSQL \u662f\u5426\u53ef\u7528? driverName = \"PostgreSQL\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## File GeoDatabase \u662f\u5426\u53ef\u7528? driverName = \"FileGDB\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName ) ## SDE \u662f\u5426\u53ef\u7528? driverName = \"SDE\" drv = ogr . GetDriverByName ( driverName ) if drv is None : print ( \" %s \u9a71\u52a8\u4e0d\u53ef\u7528. \\n \" % driverName ) else : print ( \" %s \u9a71\u52a8\u53ef\u7528. \\n \" % driverName )","title":"\u9a71\u52a8\u662f\u5426\u53ef\u7528"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#shapefile","text":"import os from osgeo import ogr daShapefile = r \"/test.shp\" driver = ogr . GetDriverByName ( 'ESRI Shapefile' ) dataSource = driver . Open ( daShapefile , 0 ) # 0 \u53ea\u8bfb. 1 \u8bfb\u5199. # \u68c0\u67e5\u6570\u636e\u6e90\u662f\u5426\u6709\u6548. if dataSource is None : print ( '\u4e0d\u80fd\u6253\u5f00 %s ' % ( daShapefile )) else : print ( '\u6253\u5f00 %s ' % ( daShapefile )) layer = dataSource . GetLayer () featureCount = layer . GetFeatureCount () print ( \" %s \u8981\u7d20\u4e2a\u6570: %d \" % ( os . path . basename ( daShapefile ), featureCount ))","title":"\u83b7\u53d6shapefile\u8981\u7d20\u4e2a\u6570"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis","text":"from osgeo import ogr databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) conn = ogr . Open ( connString ) layerList = [] for i in conn : daLayer = i . GetName () if not daLayer in layerList : layerList . append ( daLayer ) layerList . sort () for j in layerList : print ( j ) # \u5173\u95ed\u8fde\u63a5 conn = None","title":"\u83b7\u53d6PostGIS\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis_1","text":"from osgeo import ogr import sys databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) def GetPGLayer ( lyr_name ): conn = ogr . Open ( connString ) lyr = conn . GetLayer ( lyr_name ) if lyr is None : sys . exit ( 1 ) featureCount = lyr . GetFeatureCount () print ( \" %s \u8981\u7d20\u4e2a\u6570 : %d \" % ( lyr_name , featureCount )) # \u5173\u95ed\u8fde\u63a5 conn = None if __name__ == '__main__' : GetPGLayer ( \"test\" )","title":"\u83b7\u53d6PostGIS\u56fe\u5c42\u7684\u8981\u7d20"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#esri-gdb","text":"import sys from osgeo import ogr ogr . UseExceptions () driver = ogr . GetDriverByName ( \"OpenFileGDB\" ) # opening the FileGDB try : gdb = driver . Open ( \"/sparse.gdb\" , 0 ) except Exception as e : print ( e ) sys . exit () featsClassList = [] # \u83b7\u53d6\u56fe\u5c42 for featsClass_idx in range ( gdb . GetLayerCount ()): featsClass = gdb . GetLayerByIndex ( featsClass_idx ) featsClassList . append ( featsClass . GetName ()) featsClassList . sort () for featsClass in featsClassList : print ( featsClass )","title":"\u83b7\u53d6ESRI GDB\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_4","text":"from osgeo import ogr # \u6253\u5f00\u8f93\u5165\u6570\u636e\u6e90 indriver = ogr . GetDriverByName ( 'SQLite' ) srcdb = indriver . Open ( '/poly_spatialite.sqlite' , 0 ) # \u521b\u5efa\u5185\u5b58\u8f93\u51fa\u6570\u636e\u6e90 outdriver = ogr . GetDriverByName ( 'MEMORY' ) source = outdriver . CreateDataSource ( 'memData' ) # \u6253\u5f00\u5185\u5b58\u6570\u636e tmp = outdriver . Open ( 'memData' , 1 ) # \u590d\u5236\u56fe\u5c42\u5230\u5185\u5b58 poly_mem = source . CopyLayer ( srcdb . GetLayer ( 'poly' ), 'poly' ,[ 'OVERWRITE=YES' ]) # \u65b0\u7684\u56fe\u5c42\u53ef\u76f4\u63a5\u88ab\u8bbf\u95ee\uff0cpoly_mem \u6216\u8005 source.GetLayer('poly'): layer = source . GetLayer ( 'poly' ) for feature in layer : feature . SetField ( 'area' , 1 )","title":"\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_5","text":"from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () for feature in layer : print ( feature . GetField ( \"area\" )) layer . ResetReading ()","title":"\u904d\u5386\u8981\u7d20"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_6","text":"from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () for feature in layer : geom = feature . GetGeometryRef () # \u83b7\u53d6\u8d28\u5fc3 print ( geom . Centroid () . ExportToWkt ())","title":"\u904d\u5386\u8981\u7d20\u51e0\u4f55"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_7","text":"from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () layer . SetAttributeFilter ( \"area = 5268.813\" ) for feature in layer : print ( feature . GetField ( \"area\" ))","title":"\u8fc7\u6ee4\u5c5e\u6027"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_8","text":"from osgeo import ogr import os shapefile = \"/test.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) dataSource = driver . Open ( shapefile , 0 ) layer = dataSource . GetLayer () wkt = \"POLYGON ((479386 4764749,481098 4764226,480772 4763114,478681 4763159,479386 4764749))\" layer . SetSpatialFilter ( ogr . CreateGeometryFromWkt ( wkt )) for feature in layer : print ( feature . GetField ( \"area\" ))","title":"\u7a7a\u95f4\u8fc7\u6ee4"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_9","text":"from osgeo import ogr daShapefile = r \"/test.shp\" dataSource = ogr . Open ( daShapefile ) daLayer = dataSource . GetLayer ( 0 ) layerDefinition = daLayer . GetLayerDefn () for i in range ( layerDefinition . GetFieldCount ()): fieldName = layerDefinition . GetFieldDefn ( i ) . GetName () fieldTypeCode = layerDefinition . GetFieldDefn ( i ) . GetType () fieldType = layerDefinition . GetFieldDefn ( i ) . GetFieldTypeName ( fieldTypeCode ) fieldWidth = layerDefinition . GetFieldDefn ( i ) . GetWidth () GetPrecision = layerDefinition . GetFieldDefn ( i ) . GetPrecision () print ( fieldName + \" - \" + fieldType + \" \" + str ( fieldWidth ) + \" \" + str ( GetPrecision ))","title":"\u83b7\u53d6\u8981\u7d20\u5b57\u6bb5"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#postgis_2","text":"from osgeo import ogr import sys databaseServer = \"localhost\" databaseName = \"test2020\" databaseUser = \"postgres\" databasePW = \"123456\" connString = \"PG: host= %s dbname= %s user= %s password= %s \" % ( databaseServer , databaseName , databaseUser , databasePW ) def GetPGLayerFields ( lyr_name ): conn = ogr . Open ( connString ) lyr = conn . GetLayer ( lyr_name ) if lyr is None : sys . exit ( 1 ) lyrDefn = lyr . GetLayerDefn () for i in range ( lyrDefn . GetFieldCount () ): fieldName = lyrDefn . GetFieldDefn ( i ) . GetName () fieldTypeCode = lyrDefn . GetFieldDefn ( i ) . GetType () fieldType = lyrDefn . GetFieldDefn ( i ) . GetFieldTypeName ( fieldTypeCode ) fieldWidth = lyrDefn . GetFieldDefn ( i ) . GetWidth () GetPrecision = lyrDefn . GetFieldDefn ( i ) . GetPrecision () print ( fieldName + \" - \" + fieldType + \" \" + str ( fieldWidth ) + \" \" + str ( GetPrecision )) if __name__ == '__main__' : GetPGLayerFields ( \"test\" )","title":"\u83b7\u53d6PostGIS\u56fe\u5c42\u5b57\u6bb5"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_10","text":"from osgeo import ogr ds = ogr . Open ( \"/test.shp\" , 0 ) layer = ds . GetLayer () capabilities = [ ogr . OLCRandomRead , ogr . OLCSequentialWrite , ogr . OLCRandomWrite , ogr . OLCFastSpatialFilter , ogr . OLCFastFeatureCount , ogr . OLCFastGetExtent , ogr . OLCCreateField , ogr . OLCDeleteField , ogr . OLCReorderFields , ogr . OLCAlterFieldDefn , ogr . OLCTransactions , ogr . OLCDeleteFeature , ogr . OLCFastSetNextByIndex , ogr . OLCStringsAsUTF8 , ogr . OLCIgnoreFields ] print ( \"\u56fe\u5c42\u80fd\u529b:\" ) for cap in capabilities : print ( \" %s = %s \" % ( cap , layer . TestCapability ( cap )))","title":"\u83b7\u53d6\u56fe\u5c42\u80fd\u529b"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#wfs","text":"import sys from osgeo import ogr , osr , gdal # \u83b7\u53d6WFS\u9a71\u52a8 wfs_drv = ogr . GetDriverByName ( 'WFS' ) # \u52a0\u5feb\u67e5\u8be2\u591a\u56fe\u5c42WFS\u670d\u52a1 gdal . SetConfigOption ( 'OGR_WFS_LOAD_MULTIPLE_LAYER_DEFN' , 'NO' ) # \u8bbe\u7f6e\u5206\u9875\u7684\u914d\u7f6e\u3002\u9002\u7528\u4e8eWFS 2.0\u670d\u52a1\u4ee5\u53caWFS 1.0\u548c1.1\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u670d\u52a1\u3002 gdal . SetConfigOption ( 'OGR_WFS_PAGING_ALLOWED' , 'YES' ) gdal . SetConfigOption ( 'OGR_WFS_PAGE_SIZE' , '10000' ) url = 'http://sampleserver6.arcgisonline.com/arcgis/services/SampleWorldCities/MapServer/WFSServer' wfs_ds = wfs_drv . Open ( 'WFS:' + url ) if not wfs_ds : sys . exit ( '\u9519\u8bef: \u4e0d\u80fd\u6253\u5f00 WFS \u6570\u636e\u6e90' ) else : pass # \u904d\u5386\u56fe\u5c42 for i in range ( wfs_ds . GetLayerCount ()): layer = wfs_ds . GetLayerByIndex ( i ) srs = layer . GetSpatialRef () print ( 'Layer: %s , Features: %s , SR: %s ...' % ( layer . GetName (), layer . GetFeatureCount (), srs . ExportToWkt ()[ 0 : 50 ])) # \u904d\u5386\u8981\u7d20 feat = layer . GetNextFeature () while feat is not None : feat = layer . GetNextFeature () # do something more.. feat = None # \u83b7\u53d6\u6307\u5b9a\u56fe\u5c42 layer = wfs_ds . GetLayerByName ( \"esri:World\" ) if not layer : sys . exit ( '\u9519\u8bef\uff1a\u4e0d\u80fd\u627e\u5230\u56fe\u5c42\uff1aesri:World' ) else : pass","title":"WFS\u56fe\u5c42\u548c\u904d\u5386\u8981\u7d20"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#http","text":"import sys from osgeo import ogr , osr , gdal server = 'proxy.example.com' port = 3128 # \u8bbe\u7f6e\u4ee3\u7406 gdal . SetConfigOption ( 'GDAL_HTTP_PROXY' , server + ':' + port ) # \u6ca1\u6709\u7528\u6237\u540d\u6216\u5bc6\u7801\u7684NTLM\u8bbe\u7f6e\u4ee3\u7406\u8eab\u4efd\u9a8c\u8bc1\u9009\u9879\uff0c\u56e0\u6b64\u5355\u70b9\u767b\u5f55\u6709\u6548 gdal . SetConfigOption ( 'GDAL_PROXY_AUTH' , 'NTLM' ) gdal . SetConfigOption ( 'GDAL_HTTP_PROXYUSERPWD' , ' : ' ) ds = ogr . Open ( 'http://featureserver/cities/.geojson' ) if not ds : sys . exit ( 'ERROR: can not open GeoJSON datasource' ) lyr = ds . GetLayer ( 'OGRGeoJSON' ) for feat in lyr : geom = feat . GetGeometryRef () print ( geom . ExportToWkt ())","title":"\u8bbe\u7f6eHTTP\u4ee3\u7406"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#csvogrvrtlayer","text":"GDAL/OGR\u5177\u6709 \u865a\u62df\u683c\u5f0f\u89c4\u8303 \uff0c\u8be5\u89c4\u8303\u5141\u8bb8\u4f60\u4ece\u8bf8\u5982CSV\u4e4b\u7c7b\u7684\u5e73\u9762\u8868\u6d3e\u751f\u56fe\u5c42\u2014\u2014\u5b83\u7684\u529f\u80fd\u8fdc\u4e0d\u6b62\u4e8e\u6b64\uff0c\u56e0\u6b64\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u8bfb\u53d6\u5e26\u6709X\u3001Y\u5217\u548c\u503c\u7684CSV\u3002\u8be5CSV\u6587\u4ef6\u7531XML\u6587\u4ef6\u5305\u88c5\uff0c\u8be5XML\u6587\u4ef6\u5c06\u5176\u63cf\u8ff0\u4e3aOGR\u5c42\u3002\u4ee5\u4e0b\u662f\u6240\u6709\u5fc5\u8981\u7684\u90e8\u5206\u548c\u4e00\u4e2a\u811a\u672c\uff0c\u8be5\u811a\u672c\u8bfb\u53d6XML\u6587\u4ef6\u5e76\u6253\u5370\u51fa\u70b9\u7684\u51e0\u4f55\u5f62\u72b6\u3002 CSV\u6587\u4ef6\uff1a ID,X,Y 1,-127.234343,47.234325 2,-127.003243,46.234343 3,-127.345646,45.234324 4,-126.234324,44.324234 XML\u6587\u4ef6 <OGRVRTDataSource> <OGRVRTLayer name= \"example\" > <SrcDataSource> example.csv </SrcDataSource> <SrcLayer> example </SrcLayer> <GeometryType> wkbPoint </GeometryType> <LayerSRS> WGS84 </LayerSRS> <GeometryField encoding= \"PointFromColumns\" x= \"X\" y= \"Y\" /> </OGRVRTLayer> </OGRVRTDataSource> from osgeo import ogr ogr . UseExceptions () inDataSource = ogr . Open ( \"example_wrapper.vrt\" ) lyr = inDataSource . GetLayer ( 'example' ) for feat in lyr : geom = feat . GetGeometryRef () print ( geom . ExportToWkt ())","title":"\u8bfb\u53d6CSV\u7ecf\u7eac\u5ea6\u4f5c\u4e3aOGRVRTLayer"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_11","text":"from osgeo import ogr import os # Get a Layer's Extent inShapefile = \"states.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () extent = inLayer . GetExtent () # \u521b\u5efa\u591a\u8fb9\u5f62 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( extent [ 0 ], extent [ 2 ]) ring . AddPoint ( extent [ 1 ], extent [ 2 ]) ring . AddPoint ( extent [ 1 ], extent [ 3 ]) ring . AddPoint ( extent [ 0 ], extent [ 3 ]) ring . AddPoint ( extent [ 0 ], extent [ 2 ]) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # \u4fdd\u5b58\u5230\u65b0\u7684shp\u6587\u4ef6 outShapefile = \"new.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u6570\u636e\u6e90 outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"new\" , geom_type = ogr . wkbPolygon ) # \u6dfb\u52a0ID\u5b57\u6bb5 idField = ogr . FieldDefn ( \"id\" , ogr . OFTInteger ) outLayer . CreateField ( idField ) # \u521b\u5efa\u8981\u7d20 featureDefn = outLayer . GetLayerDefn () feature = ogr . Feature ( featureDefn ) feature . SetGeometry ( poly ) feature . SetField ( \"id\" , 1 ) outLayer . CreateFeature ( feature ) feature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None","title":"\u8ba1\u7b97\u8303\u56f4"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_12","text":"from osgeo import ogr import os # \u83b7\u5f97\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () # \u51e0\u4f55\u96c6\u5408 geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) for feature in inLayer : geomcol . AddGeometry ( feature . GetGeometryRef ()) # \u8ba1\u7b97\u51f8\u5305 convexhull = geomcol . ConvexHull () # \u4fdd\u5b58 outShapefile = \"test_convexhull.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u8f93\u51fa outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"test_convexhull\" , geom_type = ogr . wkbPolygon ) # \u6dfb\u52a0ID\u5b57\u6bb5 idField = ogr . FieldDefn ( \"id\" , ogr . OFTInteger ) outLayer . CreateField ( idField ) # \u521b\u5efa\u8981\u7d20 featureDefn = outLayer . GetLayerDefn () feature = ogr . Feature ( featureDefn ) feature . SetGeometry ( convexhull ) feature . SetField ( \"id\" , 1 ) outLayer . CreateFeature ( feature ) feature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None","title":"\u8ba1\u7b97\u51f8\u5305"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_13","text":"from osgeo import ogr import os ogr . UseExceptions () # \u8f93\u5165\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () # \u8f93\u51fa\u56fe\u5c42 outShapefile = \"test_centroids.shp\" outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5982\u679c\u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) outDataSource = outDriver . CreateDataSource ( outShapefile ) outLayer = outDataSource . CreateLayer ( \"test_centroids\" , geom_type = ogr . wkbPoint ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) outLayer . CreateField ( fieldDefn ) # \u83b7\u5f97\u8981\u7d20\u5b9a\u4e49 outLayerDefn = outLayer . GetLayerDefn () # \u6dfb\u52a0\u8981\u7d20 for i in range ( 0 , inLayer . GetFeatureCount ()): # \u8f93\u5165\u8981\u7d20 inFeature = inLayer . GetFeature ( i ) # \u8f93\u51fa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u8bbe\u7f6e\u5b57\u6bb5\u503c for i in range ( 0 , outLayerDefn . GetFieldCount ()): outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u8bbe\u7f6e\u8d28\u5fc3\u51e0\u4f55 geom = inFeature . GetGeometryRef () inFeature = None centroid = geom . Centroid () outFeature . SetGeometry ( centroid ) # \u6dfb\u52a0\u65b0\u8981\u7d20 outLayer . CreateFeature ( outFeature ) outFeature = None # \u4fdd\u5b58\u5e76\u5173\u95ed inDataSource = None outDataSource = None","title":"\u8ba1\u7b97\u8d28\u5fc3"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#shp","text":"import osgeo.ogr as ogr import osgeo.osr as osr import csv , os # \u4f7f\u7528\u5b57\u5178\u8bfb\u53d6\u6570\u636e reader = csv . DictReader ( open ( \"volcano_data.txt\" , \"r\" ), delimiter = ' \\t ' , quoting = csv . QUOTE_NONE ) # \u9a71\u52a8 outShapefile = \"volcanoes.shp\" driver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( outShapefile ): driver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u6570\u636e\u6e90 data_source = driver . CreateDataSource ( outShapefile ) # \u521b\u5efa\u7a7a\u95f4\u53c2\u8003 WGS84 srs = osr . SpatialReference () srs . ImportFromEPSG ( 4326 ) # \u521b\u5efa\u56fe\u5c42 layer = data_source . CreateLayer ( \"volcanoes\" , srs , ogr . wkbPoint ) # \u6dfb\u52a0\u5b57\u6bb5 field_name = ogr . FieldDefn ( \"Name\" , ogr . OFTString ) field_name . SetWidth ( 24 ) layer . CreateField ( field_name ) field_region = ogr . FieldDefn ( \"Region\" , ogr . OFTString ) field_region . SetWidth ( 24 ) layer . CreateField ( field_region ) layer . CreateField ( ogr . FieldDefn ( \"Latitude\" , ogr . OFTReal )) layer . CreateField ( ogr . FieldDefn ( \"Longitude\" , ogr . OFTReal )) layer . CreateField ( ogr . FieldDefn ( \"Elevation\" , ogr . OFTInteger )) # \u5904\u7406\u6587\u672c for row in reader : # \u521b\u5efa\u8981\u7d20 feature = ogr . Feature ( layer . GetLayerDefn ()) # \u8bbe\u7f6e\u5c5e\u6027\u5b57\u6bb5 feature . SetField ( \"Name\" , row [ 'Name' ]) feature . SetField ( \"Region\" , row [ 'Region' ]) feature . SetField ( \"Latitude\" , row [ 'Latitude' ]) feature . SetField ( \"Longitude\" , row [ 'Longitude' ]) feature . SetField ( \"Elevation\" , row [ 'Elevation' ]) # \u521b\u5efaWKT wkt = \"POINT( %f %f )\" % ( float ( row [ 'Longitude' ]) , float ( row [ 'Latitude' ])) # \u521b\u5efa\u70b9 point = ogr . CreateGeometryFromWkt ( wkt ) # \u8bbe\u7f6e\u51e0\u4f55 feature . SetGeometry ( point ) # \u6dfb\u52a0\u8981\u7d20 layer . CreateFeature ( feature ) # \u5220\u9664\u5f15\u7528 feature = None # \u4fdd\u5b58\u5173\u95ed data_source = None","title":"\u521b\u5efa\u65b0\u7684shp\u6570\u636e\u5e76\u6dfb\u52a0\u6570\u636e"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#wktpostgis","text":"import ogr , osr database = 'test2020' usr = 'postgres' pw = '123456' table = 'testtest' wkt = \"POINT (1120351.5712494177 741921.4223245403)\" point = ogr . CreateGeometryFromWkt ( wkt ) connectionString = \"PG:dbname=' %s ' user=' %s ' password=' %s '\" % ( database , usr , pw ) ogrds = ogr . Open ( connectionString ) srs = osr . SpatialReference () srs . ImportFromEPSG ( 4326 ) layer = ogrds . CreateLayer ( table , srs , ogr . wkbPoint , [ 'OVERWRITE=YES' ] ) layerDefn = layer . GetLayerDefn () feature = ogr . Feature ( layerDefn ) feature . SetGeometry ( point ) layer . StartTransaction () layer . CreateFeature ( feature ) feature = None layer . CommitTransaction ()","title":"\u4eceWKT\u521b\u5efaPostGIS\u8868"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_14","text":"ogr2ogr -f \"ESRI Shapefile\" junkmob.shp -select area -where \"area = 5268.813\" test.shp # \u8be5\u547d\u4ee4\u8bfb\u53d6parcel_address.shp\u5e76\u751f\u6210junkmob.shp\uff0carea=5268.813\u8f93\u51faarea\u5217 from osgeo import ogr import os , sys def main ( field_name_target ): # \u8f93\u5165\u56fe\u5c42 inShapefile = \"test.shp\" inDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) inDataSource = inDriver . Open ( inShapefile , 0 ) inLayer = inDataSource . GetLayer () inLayer . SetAttributeFilter ( \"area = 5268.813\" ) # \u521b\u5efa\u8f93\u51fa\u56fe\u5c42 outShapefile = os . path . join ( os . path . split ( inShapefile )[ 0 ], \"junkmob.shp\" ) outDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) # \u5b58\u5728\uff0c\u5148\u5220\u9664 if os . path . exists ( outShapefile ): outDriver . DeleteDataSource ( outShapefile ) # \u521b\u5efa\u8f93\u51fashp outDataSource = outDriver . CreateDataSource ( outShapefile ) out_lyr_name = os . path . splitext ( os . path . split ( outShapefile )[ 1 ] )[ 0 ] outLayer = outDataSource . CreateLayer ( out_lyr_name , geom_type = ogr . wkbMultiPolygon ) # \u6dfb\u52a0\u5b57\u6bb5 inLayerDefn = inLayer . GetLayerDefn () for i in range ( 0 , inLayerDefn . GetFieldCount ()): fieldDefn = inLayerDefn . GetFieldDefn ( i ) fieldName = fieldDefn . GetName () if fieldName not in field_name_target : continue outLayer . CreateField ( fieldDefn ) # \u8981\u7d20\u5b9a\u4e49 outLayerDefn = outLayer . GetLayerDefn () # \u6dfb\u52a0\u8981\u7d20 for inFeature in inLayer : # \u521b\u5efa\u8981\u7d20 outFeature = ogr . Feature ( outLayerDefn ) # \u6dfb\u52a0\u5b57\u6bb5 for i in range ( 0 , outLayerDefn . GetFieldCount ()): fieldDefn = outLayerDefn . GetFieldDefn ( i ) fieldName = fieldDefn . GetName () if fieldName not in field_name_target : continue outFeature . SetField ( outLayerDefn . GetFieldDefn ( i ) . GetNameRef (), inFeature . GetField ( i )) # \u8bbe\u7f6e\u51e0\u4f55 geom = inFeature . GetGeometryRef () outFeature . SetGeometry ( geom . Clone ()) # \u521b\u5efa\u8981\u7d20 outLayer . CreateFeature ( outFeature ) outFeature = None # \u4fdd\u5b58\u5173\u95ed inDataSource = None outDataSource = None main ( [ \"AREA\" , \"EAS_ID\" ])","title":"\u8fc7\u6ee4\u548c\u9009\u62e9"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_15","text":"import os , ogr , osr outputMergefn = 'merge.shp' directory = \"/Users/UserName/Downloads/\" fileStartsWith = 'test' fileEndsWith = '.shp' driverName = 'ESRI Shapefile' geometryType = ogr . wkbPolygon out_driver = ogr . GetDriverByName ( driverName ) if os . path . exists ( outputMergefn ): out_driver . DeleteDataSource ( outputMergefn ) out_ds = out_driver . CreateDataSource ( outputMergefn ) out_layer = out_ds . CreateLayer ( outputMergefn , geom_type = geometryType ) fileList = os . listdir ( directory ) for file in fileList : if file . startswith ( fileStartsWith ) and file . endswith ( fileEndsWith ): print file ds = ogr . Open ( directory + file ) lyr = ds . GetLayer () for feat in lyr : out_feat = ogr . Feature ( out_layer . GetLayerDefn ()) out_feat . SetGeometry ( feat . GetGeometryRef () . Clone ()) out_layer . CreateFeature ( out_feat ) out_feat = None out_layer . SyncToDisk ()","title":"\u5408\u5e76\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#osm","text":"TODO\uff1a\u6d4b\u8bd5 import ogr ds = ogr . Open ( 'test.osm' ) layer = ds . GetLayer () nameList = [] for feature in layer : if feature . GetField ( \"highway\" ) != None : name = feature . GetField ( \"name\" ) if name != None and name not in nameList : nameList . append ( name ) print ( nameList )","title":"\u83b7\u53d6OSM\u8857\u9053\u540d\u79f0"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_16","text":"import os , sys import ogr from math import ceil def main ( outputGridfn , xmin , xmax , ymin , ymax , gridHeight , gridWidth ): xmin = float ( xmin ) xmax = float ( xmax ) ymin = float ( ymin ) ymax = float ( ymax ) gridWidth = float ( gridWidth ) gridHeight = float ( gridHeight ) # get rows rows = ceil (( ymax - ymin ) / gridHeight ) # get columns cols = ceil (( xmax - xmin ) / gridWidth ) # start grid cell envelope ringXleftOrigin = xmin ringXrightOrigin = xmin + gridWidth ringYtopOrigin = ymax ringYbottomOrigin = ymax - gridHeight # create output file outDriver = ogr . GetDriverByName ( 'ESRI Shapefile' ) if os . path . exists ( outputGridfn ): os . remove ( outputGridfn ) outDataSource = outDriver . CreateDataSource ( outputGridfn ) outLayer = outDataSource . CreateLayer ( outputGridfn , geom_type = ogr . wkbPolygon ) featureDefn = outLayer . GetLayerDefn () # create grid cells countcols = 0 while countcols < cols : countcols += 1 # reset envelope for rows ringYtop = ringYtopOrigin ringYbottom = ringYbottomOrigin countrows = 0 while countrows < rows : countrows += 1 ring = ogr . Geometry ( ogr . wkbLinearRing ) ring . AddPoint ( ringXleftOrigin , ringYtop ) ring . AddPoint ( ringXrightOrigin , ringYtop ) ring . AddPoint ( ringXrightOrigin , ringYbottom ) ring . AddPoint ( ringXleftOrigin , ringYbottom ) ring . AddPoint ( ringXleftOrigin , ringYtop ) poly = ogr . Geometry ( ogr . wkbPolygon ) poly . AddGeometry ( ring ) # add new geom to layer outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( poly ) outLayer . CreateFeature ( outFeature ) outFeature = None # new envelope for next poly ringYtop = ringYtop - gridHeight ringYbottom = ringYbottom - gridHeight # new envelope for next poly ringXleftOrigin = ringXleftOrigin + gridWidth ringXrightOrigin = ringXrightOrigin + gridWidth # Save and close DataSources outDataSource = None if __name__ == \"__main__\" : # # example run : $ python grid.py <full-path><output-shapefile-name>.shp xmin xmax ymin ymax gridHeight gridWidth # if len ( sys . argv ) != 8 : print \"[ ERROR ] you must supply seven arguments: output-shapefile-name.shp xmin xmax ymin ymax gridHeight gridWidth\" sys . exit ( 1 ) main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 3 ], sys . argv [ 4 ], sys . argv [ 5 ], sys . argv [ 6 ], sys . argv [ 7 ] )","title":"\u521b\u5efa\u9c7c\u7f51"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_17","text":"import ogr , os def poly2line ( input_poly , output_line ): source_ds = ogr . Open ( input_poly ) source_layer = source_ds . GetLayer () # polygon2geometryCollection geomcol = ogr . Geometry ( ogr . wkbGeometryCollection ) for feat in source_layer : geom = feat . GetGeometryRef () ring = geom . GetGeometryRef ( 0 ) geomcol . AddGeometry ( ring ) # geometryCollection2shp shpDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( output_line ): shpDriver . DeleteDataSource ( output_line ) outDataSource = shpDriver . CreateDataSource ( output_line ) outLayer = outDataSource . CreateLayer ( output_line , geom_type = ogr . wkbMultiLineString ) featureDefn = outLayer . GetLayerDefn () outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( geomcol ) outLayer . CreateFeature ( outFeature ) outFeature = None def main ( input_poly , output_line ): poly2line ( input_poly , output_line ) if __name__ == \"__main__\" : input_poly = 'test_polygon.shp' output_line = 'test_line.shp' main ( input_poly , output_line )","title":"\u9762\u8f6c\u7ebf"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_18","text":"import ogr , os def createBuffer ( inputfn , outputBufferfn , bufferDist ): inputds = ogr . Open ( inputfn ) inputlyr = inputds . GetLayer () shpdriver = ogr . GetDriverByName ( 'ESRI Shapefile' ) if os . path . exists ( outputBufferfn ): shpdriver . DeleteDataSource ( outputBufferfn ) outputBufferds = shpdriver . CreateDataSource ( outputBufferfn ) bufferlyr = outputBufferds . CreateLayer ( outputBufferfn , geom_type = ogr . wkbPolygon ) featureDefn = bufferlyr . GetLayerDefn () for feature in inputlyr : ingeom = feature . GetGeometryRef () geomBuffer = ingeom . Buffer ( bufferDist ) outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( geomBuffer ) bufferlyr . CreateFeature ( outFeature ) outFeature = None def main ( inputfn , outputBufferfn , bufferDist ): createBuffer ( inputfn , outputBufferfn , bufferDist ) if __name__ == \"__main__\" : inputfn = 'test.shp' outputBufferfn = 'testBuffer.shp' bufferDist = 10.0 main ( inputfn , outputBufferfn , bufferDist )","title":"\u521b\u5efa\u7f13\u51b2\u533a"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_19","text":"import ogr , gdal vector_fn = 'test.shp' # \u5b9a\u4e49\u50cf\u7d20\u5927\u5c0f\u548c\u65e0\u6548\u503c pixel_size = 25 NoData_value = 255 # \u6253\u5f00\u6570\u636e\u6e90\uff0c\u8bfb\u53d6\u6570\u636e\u8303\u56f4 source_ds = ogr . Open ( vector_fn ) source_layer = source_ds . GetLayer () source_srs = source_layer . GetSpatialRef () x_min , x_max , y_min , y_max = source_layer . GetExtent () # \u521b\u5efa\u76ee\u6807\u6570\u636e\u6e90 x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'MEM' ) . Create ( '' , x_res , y_res , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( NoData_value ) # \u6805\u683c\u5316 gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 1 ]) # \u8bfb\u53d6\u4e3a\u6570\u7ec4 array = band . ReadAsArray () print ( array )","title":"\u6805\u683c\u5316\u77e2\u91cf\u56fe\u5c42"},{"location":"%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%B1%82/#_20","text":"TODO\uff1a\u6d4b\u8bd5 import ogr , gdal import numpy as np import os polygon_fn = 'test.shp' # Define pixel_size which equals distance betweens points pixel_size = 10 # Open the data source and read in the extent source_ds = ogr . Open ( polygon_fn ) source_layer = source_ds . GetLayer () x_min , x_max , y_min , y_max = source_layer . GetExtent () # Create the destination data source x_res = int (( x_max - x_min ) / pixel_size ) y_res = int (( y_max - y_min ) / pixel_size ) target_ds = gdal . GetDriverByName ( 'GTiff' ) . Create ( 'temp.tif' , x_res , y_res , gdal . GDT_Byte ) target_ds . SetGeoTransform (( x_min , pixel_size , 0 , y_max , 0 , - pixel_size )) band = target_ds . GetRasterBand ( 1 ) band . SetNoDataValue ( 255 ) # Rasterize gdal . RasterizeLayer ( target_ds , [ 1 ], source_layer , burn_values = [ 1 ]) # Read as array array = band . ReadAsArray () raster = gdal . Open ( 'temp.tif' ) geotransform = raster . GetGeoTransform () # Convert array to point coordinates count = 0 roadList = np . where ( array == 1 ) multipoint = ogr . Geometry ( ogr . wkbMultiPoint ) for indexY in roadList [ 0 ]: indexX = roadList [ 1 ][ count ] geotransform = raster . GetGeoTransform () originX = geotransform [ 0 ] originY = geotransform [ 3 ] pixelWidth = geotransform [ 1 ] pixelHeight = geotransform [ 5 ] Xcoord = originX + pixelWidth * indexX Ycoord = originY + pixelHeight * indexY point = ogr . Geometry ( ogr . wkbPoint ) point . AddPoint ( Xcoord , Ycoord ) multipoint . AddGeometry ( point ) count += 1 # Write point coordinates to Shapefile shpDriver = ogr . GetDriverByName ( \"ESRI Shapefile\" ) if os . path . exists ( 'points.shp' ): shpDriver . DeleteDataSource ( 'points.shp' ) outDataSource = shpDriver . CreateDataSource ( 'points.shp' ) outLayer = outDataSource . CreateLayer ( 'points.shp' , geom_type = ogr . wkbMultiPoint ) featureDefn = outLayer . GetLayerDefn () outFeature = ogr . Feature ( featureDefn ) outFeature . SetGeometry ( multipoint ) outLayer . CreateFeature ( outFeature ) outFeature = None # Remove temporary files os . remove ( 'temp.tif' )","title":"\u9762\u8f6c\u70b9"}]}